{"version":3,"file":"default-src_app_core_data_remote_services_survey_service_ts-es2015.js","mappings":"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","sources":["./src/app/@core/data/remote/schemas/Answer.ts","./src/app/@core/data/remote/schemas/condition.ts","./src/app/@core/data/remote/schemas/occupation.ts","./src/app/@core/data/remote/schemas/onet.ts","./src/app/@core/data/remote/schemas/option.ts","./src/app/@core/data/remote/schemas/population.ts","./src/app/@core/data/remote/schemas/pps.ts","./src/app/@core/data/remote/schemas/pps_rank.ts","./src/app/@core/data/remote/schemas/question.ts","./src/app/@core/data/remote/schemas/section.ts","./src/app/@core/data/remote/schemas/survey.ts","./src/app/@core/data/remote/schemas/surveyed.ts","./src/app/@core/data/remote/services/survey.service.ts"],"sourcesContent":["import { Deserializable } from './deserializable.model';\r\n\r\nexport class Answer implements Deserializable {\r\n  id?: number;\r\n  question_id?: string[];\r\n  survey_id: any;\r\n  value: any;\r\n  checked?: boolean;\r\n  deserialize?(input: any): this {\r\n    Object.assign(this, input);\r\n    this.checked = input.checked == 1 ? true: false;\r\n\r\n    return this;\r\n  }\r\n  constructor(){\r\n  }\r\n\r\n}\r\n","import { Deserializable } from './deserializable.model';\r\nimport { Question } from './question';\r\n\r\nexport class Condition implements Deserializable {\r\n  id?: number;\r\n  question_id: number;\r\n  restriction_id?: number;\r\n  value?: string;\r\n  label?: string;\r\n  question: Question;\r\n  question_index: number;\r\n\r\n\r\n  deserialize?(input: any): this {\r\n    Object.assign(this, input);\r\n    this.question ? input.question.map(question => new Question().deserialize(question)) : [];\r\n\r\n    return this;\r\n  }\r\n  constructor(){\r\n  }\r\n\r\n}\r\n\r\n","import { Deserializable } from './deserializable.model';\n\nexport class Occupation implements Deserializable {\n  id?: number;\n  title?: string;\n  desc?: string;\n  icon?: string;\n  knowledges?:any[];\n  skills?:any[];\n  outputs?:any[];\n  onet?:any[];\n\n  deserialize?(input: any): this {\n    Object.assign(this, input);\n    //this.onet ?  new Onet().deserialize(input.pps)   : [];\n\n    return this;\n  }\n  constructor(){\n  }\n\n}\n","import { Deserializable } from './deserializable.model';\n\nexport class Onet implements Deserializable {\n  cno_onet_id?: number;\n  title?: string;\n  desc?: string;\n  icon?: string;\n  onets?: Onet;\n  outputs?: any[];\n\n  deserialize?(input: any): this {\n    Object.assign(this, input);\n    //this.onet ?  new Onet().deserialize(input.pps)   : [];\n\n    return this;\n  }\n  constructor(){\n  }\n\n}\n","import { Deserializable } from './deserializable.model';\r\n\r\nexport class Option implements Deserializable {\r\n  id?: number;\r\n  question_id: number;\r\n  subcode?: string;\r\n  text: string;\r\n  value?: string;\r\n\r\n\r\n  deserialize?(input: any): this {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n  constructor(){\r\n  }\r\n\r\n}\r\n\r\n","import { Deserializable } from './deserializable.model';\r\nimport { Surveyed } from './surveyed';\r\n\r\nexport class Population implements Deserializable {\r\n  id?: number;\r\n  name?: string[];\r\n  uuid: any;\r\n  active: boolean;\r\n  surveyeds: Surveyed[];\r\n  created_at?:any;\r\n  updated_at?:any;\r\n  surveys?:any;\r\n  file_path?: string;\r\n  deserialize?(input: any): this {\r\n    Object.assign(this, input);\r\n    this.surveyeds ? input.surveyeds.map(surveyed => new Surveyed().deserialize(surveyed)) : [];\r\n\r\n    return this;\r\n  }\r\n  constructor(){\r\n  }\r\n\r\n}\r\n","import { Deserializable } from './deserializable.model';\r\nimport { Onet } from './onet';\r\n\r\nexport class Pps implements Deserializable {\r\n  id?: number;\r\n  code?: string;\r\n  title: string;\r\n  desc?: string;\r\n  icon?: string;\r\n  onets?: Onet[];\r\n\r\n\r\n  deserialize?(input: any): this {\r\n    Object.assign(this, input);\r\n    this.onets ?   input.onets.map(onet => new Onet().deserialize(onet)) : [];\r\n\r\n    return this;\r\n  }\r\n  constructor(){\r\n  }\r\n\r\n}\r\n","import { Deserializable } from './deserializable.model';\nimport { Pps } from './pps';\n\nexport class PpsRank implements Deserializable {\n  id?: number;\n  survey_id?: number;\n  cno_professional_profile_id: number;\n  total?: number;\n  pps?: Pps;\n  deserialize?(input: any): this {\n    Object.assign(this, input);\n    this.pps ?  new Pps().deserialize(input.pps)   : [];\n\n    return this;\n  }\n  constructor(){\n  }\n\n}\n","import { ValidatorFn, Validators } from '@angular/forms';\r\nimport { Answer } from './Answer';\r\nimport { Condition } from './condition';\r\nimport { Deserializable } from './deserializable.model';\r\nimport { Option } from './option';\r\n\r\nexport class Question implements Deserializable {\r\n  id: number;\r\n  section: string;\r\n  code: string;\r\n  text: string;\r\n  desc?: string[];\r\n  type: string;\r\n  required: boolean;\r\n  label:string;\r\n  options: Option[];\r\n  newOpt?: string;\r\n  addingOption: boolean;\r\n  start?: string;\r\n  end?: string;\r\n  validators: Array<ValidatorFn>;\r\n  conditions: Array<Condition>;\r\n  show: boolean;\r\n  value: any;\r\n  answers:  Array<Answer>;\r\n  answer:  Array<any>;\r\n  checked: boolean;\r\n  deserialize?(input: any): this {\r\n    //Set Validators\r\n    input.validators = new Array<ValidatorFn>();\r\n    input.required ? input.validators.push(Validators.required):input.required;\r\n    input.isEmail ? input.validators.push(Validators.email):input.isEmail;\r\n    input.show = true;\r\n    //Set Conditions\r\n    this.conditions ? input.options.map(condition => new Condition().deserialize(condition)) : [];\r\n    this.answers ? input.answers.map(answer => new Answer().deserialize(answer)) : [];\r\n\r\n\r\n\r\n    /*Object.assign(this, input);\r\n    if(this.conditions){\r\n       this.conditions.forEach(condition => {\r\n      if(condition.question.id === this.id){\r\n        condition.question = this\r\n        this.show = condition.question.show;\r\n      }\r\n    });\r\n    }*/\r\n    this.options ? input.options.map(option => new Option().deserialize(option)) : [];\r\n    this.checked = input.checked==\"1\" ? true: false;\r\n\r\n    return this;\r\n  }\r\n\r\n  constructor(){\r\n  }\r\n\r\n}\r\n\r\n","import { Condition } from \"./condition\";\r\nimport { Question } from \"./question\";\r\nimport { Survey } from \"./survey\";\r\n\r\nexport class Section {\r\n  id: number;\r\n  code: string;\r\n  text: string;\r\n  desc?: string[];\r\n  type: string;\r\n  required: boolean;\r\n  visible: boolean;\r\n  questions: Question[];\r\nsurvey?: Survey;\r\n  deserialize?(input: any): this {\r\n    Object.assign(this, input);\r\n    let conditions: Array<Condition> = new Array<Condition>();\r\n    this.questions ? input.questions.map(question =>{new Question().deserialize(question)} ) : [];\r\n    //Get array of conditions\r\n    this.questions.map((question) => {\r\n      question.conditions.map((condition)=>{\r\n        conditions.push(condition);\r\n      })\r\n    });\r\n    //Get index of question in array\r\n    conditions.map(condition=>{\r\n      this.questions.map((question,index)=>{\r\n        if(condition.restriction_id == question.id){\r\n          condition.question_index = index;\r\n        }\r\n      })\r\n    })\r\n\r\n\r\n    return this;\r\n  }\r\n  constructor(){\r\n  }\r\n}\r\n","import { Deserializable } from './deserializable.model';\r\nimport { Surveyed } from './surveyed';\r\n\r\nexport class Survey implements Deserializable {\r\n  id?: number;\r\n  questions?: string[];\r\n  uuid: any;\r\n  surveyed?: Surveyed;\r\n  created_at?:any;\r\n  updated_at?:any;\r\n  deserialize?(input: any): this {\r\n    Object.assign(this, input);\r\n    this.surveyed ?  new Surveyed().deserialize(input.surveyed)   : [];\r\n\r\n    return this;\r\n  }\r\n  constructor(){\r\n  }\r\n\r\n}\r\n","import { Deserializable } from './deserializable.model';\r\n\r\nexport class Surveyed implements Deserializable {\r\n  id?: number;\r\n  first_name?: string;\r\n  last_name?: string;\r\n  identification?: string;\r\n  name?: string;\r\n  population_id?: string;\r\n  deserialize?(input: any): this {\r\n    input.name = input.first_name + \" \" + input.last_name;\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n  constructor(){\r\n  }\r\n\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { FormGroup, Validators } from '@angular/forms';\r\nimport { Commons } from '@core/utils/commons';\r\nimport { NbToastrService } from '@nebular/theme';\r\nimport { Observable } from 'rxjs';\r\nimport { catchError, map, tap } from 'rxjs/operators';\r\nimport { ApiService } from '../api.service';\r\nimport { Occupation } from '../schemas/occupation';\r\nimport { Option } from '../schemas/option';\r\nimport { Population } from '../schemas/population';\r\nimport { PpsRank } from '../schemas/pps_rank';\r\nimport { Question } from '../schemas/question';\r\nimport { Section } from '../schemas/section';\r\nimport { Survey } from '../schemas/survey';\r\nimport { Surveyed } from '../schemas/surveyed';\r\nimport { User } from '../schemas/users';\r\nconst routes = {\r\n  questions: 'questions',\r\n  question: (id: number) => `questions/${id}`,\r\n  options: 'options',\r\n  option: (id: number) => `options/${id}`,\r\n  sections: 'sections',\r\n  section: (session: string,uuid: string ) => `sections/${session}/${uuid}`,\r\n  surveys: 'surveys',\r\n  survey: (id: string) =>  `surveys/${id}`,\r\n  survey_uuid: (id: string) => `surveys/uuid/${id}`,\r\n  surveyeds: \"surveyeds\",\r\n  surveyed: (id: string) =>  `surveyeds/${id}`,\r\n\r\n  populations:\"populations\",\r\n  population: (id: string) => `populations/${id}`,\r\n  population_activate: (id: string) => `populations/activate/${id}`,\r\n\r\n  user_surveys:  (id: string) => `surveys/${id}`,\r\n  gateway: 'surveys/gateway',\r\n  user: (id: number) => `users/${id}`,\r\n\r\n  pps_uuid: (uuid: string) =>  `pps/${uuid}`,\r\n  occupations: (pps_code: string,onet_title: string, ) =>  `occupations/${pps_code}/${onet_title}`,\r\n  occupation:(title: string) =>  `occupation/${title}`,\r\n};\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class SurveyService extends  Commons {\r\n\r\n\r\n\r\n\r\n\r\n\r\n  constructor(\r\n    private _http: ApiService,\r\n    private _nbService: NbToastrService,\r\n    ) {\r\n    super(_nbService);\r\n    }\r\n\r\n  getAllSections(): Observable<Section[]> {\r\n    return  this._http.get<Section[]>(routes.sections).pipe(\r\n      tap(_ => this.log('Fetched Sections')),\r\n      catchError(this.handleError<Section[]>('getAll', [])),\r\n      map(sections => sections.map(section => new Section().deserialize(section))),\r\n    );\r\n  }\r\n\r\n  getSingleSection(uuid: string, section: string): Observable<Section> {\r\n    return this._http.get<Section>(routes.section(section,uuid)).pipe(\r\n      map(section => new Section().deserialize(section)) );\r\n    }\r\n\r\n  getAllQuestions(): Observable<Question[]> {\r\n    return  this._http.get<Question[]>(routes.questions).pipe(\r\n     tap(_ => this.log('Fetched Questions')),\r\n     catchError(this.handleError<Question[]>('getAll', [])),\r\n     map(questions => questions.map(question => new Question().deserialize(question))),\r\n   );\r\n  }\r\n\r\n  /** PUT: Update a Questión */\r\n  updateQuestion(q: Question): Observable<Question> {\r\n    return this._http.put<Question>(routes.question(q.id), q).pipe(\r\n      tap(_ => this.log(`Updated role id=${q.id}`)),\r\n      catchError(this.handleError<Question>('updateQuestion')),\r\n    );\r\n  }\r\n\r\n  /** POST: Update a Questión */\r\n  addOption(  q: Option) {\r\n    return this._http.post<Option>(routes.options, q).pipe(\r\n      tap(_ => this.log(`Add Option id=${q.id}`)),\r\n      catchError(this.handleError<Question>('addOption')),\r\n    );\r\n  }\r\n\r\n  deleteOption(q: Option) {\r\n    return this._http.delete<Option>(routes.option(q.id)).pipe(\r\n      tap(_ => this.log(`Deleted Option id=${q.id}`)),\r\n      catchError(this.handleError<Question>('deleteOption')),\r\n    );\r\n  }\r\n  /** POST: Update or add a Survey */\r\n\r\n  addOrUpdateSurvey(survey: FormData) {\r\n    return this._http.postFormData<Survey>(routes.surveys, survey, {\r\n      reportProgress: true,\r\n      observe: 'events'\r\n    }).pipe(\r\n      tap(_ => this.log(`create Survey `)),\r\n      catchError(this.handleError<Survey>('Survey')),\r\n    );\r\n  }\r\n\r\n  createOrGetSurvey(survey: FormData) {\r\n    return this._http.postFormData<Survey>(routes.gateway, survey, {\r\n      reportProgress: true,\r\n      observe: 'events'\r\n    }).pipe(\r\n      tap(_ => this.log(`create Survey `)),\r\n      catchError(this.handleError<Survey>('Survey')),\r\n    );\r\n  }\r\n\r\n\r\n\r\n    getSingleUser(id: number): Observable<User> {\r\n    return this._http.get<User>(routes.user(id)).pipe(\r\n      catchError(this.handleError<User[]>('getSingle', [])),\r\n      map(user => new User().deserialize(user)),\r\n      );\r\n    }\r\n\r\n\r\n    getSurveys(id: string): Observable<Survey> {\r\n      return  this._http.get<Survey[]>(routes.user_surveys(id)).pipe(\r\n      tap(_ => this.log('Fetched Surveys')),\r\n      catchError(this.handleError<Question[]>('getAll', [])),\r\n      map(surveys => surveys.map(survey => new Survey().deserialize(survey))),\r\n    );\r\n    }\r\n\r\n\r\n    getSurvey(uuid: string) {\r\n      return  this._http.get<Survey[]>(routes.survey_uuid(uuid)).pipe(\r\n        tap(_ => this.log('Fetched Surveys')),\r\n        catchError(this.handleError<Survey[]>('getAll', [])),\r\n        map(survey => new Survey().deserialize(survey)) ,\r\n      );\r\n    }\r\n\r\n    getPpsRank(uuid: string) : Observable<PpsRank[]> {\r\n      return  this._http.get<PpsRank[]>(routes.pps_uuid(uuid)).pipe(\r\n        tap(_ => this.log('Fetched Pps')),\r\n        catchError(this.handleError<PpsRank[]>('getAll', [])),\r\n        map(ppsRanking => ppsRanking.map(ppsRank => new PpsRank().deserialize(ppsRank))) ,\r\n      );\r\n    }\r\n\r\n    getOccupationByTitle(title: string) {\r\n      return  this._http.get<PpsRank[]>(routes.occupation(title)).pipe(\r\n        tap(_ => this.log('Fetched getOccupations')),\r\n        catchError(this.handleError<Occupation[]>('getAll', [])),\r\n        map(occupation => new Occupation().deserialize(occupation)) ,\r\n      );    }\r\n\r\n\r\n    getOccupationsBylevel(pps_code: string,onet_title: string){\r\n      return  this._http.get<PpsRank[]>(routes.occupations(pps_code,onet_title)).pipe(\r\n        tap(_ => this.log('Fetched getOccupations')),\r\n        catchError(this.handleError<Occupation[]>('getAll', [])),\r\n        map(ocupattions => ocupattions.map(occupation => new Occupation().deserialize(occupation))) ,\r\n      );\r\n    }\r\n\r\n\r\n    getPopulations(): Observable<Population[]> {\r\n      return  this._http.get<Population[]>(routes.populations).pipe(\r\n       tap(_ => this.log('Fetched Population')),\r\n       catchError(this.handleError<Population[]>('Population', [])),\r\n       map(populations => populations.map(population => new Population().deserialize(population))),\r\n     );\r\n    }\r\n    addPopulation(formData: FormData) {\r\n      return this._http.postFormData<Survey>(routes.populations, formData, {\r\n        reportProgress: true,\r\n        observe: 'events'\r\n      }).pipe(\r\n        tap(_ => this.log(`create Population `)),\r\n        catchError(this.handleError<Population>('Population')),\r\n      );\r\n    }\r\n    getPopulation(pop_id: any) {\r\n      return  this._http.get<Population[]>(routes.population(pop_id)).pipe(\r\n        tap(_ => this.log('Fetched Population')),\r\n        catchError(this.handleError<Population[]>('getAll', [])),\r\n        map(population => new Population().deserialize(population)) ,\r\n      );\r\n    }\r\n\r\n    delPopulations(pop: Population) {\r\n      const url = routes.population(pop.id+\"\");\r\n\r\n      return this._http.delete<Population>(url).pipe(\r\n        tap(_ => this.log(`deleted Population id=${pop.id}`)),\r\n        catchError(this.handleError<Population>('deletePopulation')),\r\n      );\r\n    }\r\n\r\n    activePopulations(pop: Population): Observable<Population[]>{\r\n      const url = routes.population_activate(pop.id+\"\");\r\n\r\n      return this._http.post<Population>(url).pipe(\r\n        tap(_ => this.log('Fetched Population')),\r\n        catchError(this.handleError<Question[]>('Population', [])),\r\n        map(populations => populations.map(population => new Population().deserialize(population))),\r\n        );\r\n      }\r\n\r\n\r\n      addSurveyed(  surveyed: Surveyed) {\r\n        return this._http.post<Surveyed>(routes.surveyeds, surveyed).pipe(\r\n          tap(_ => this.log(`Add Surveyed id=${surveyed.id}`)),\r\n          catchError(this.handleError<Surveyed>('addSurveyedn')),\r\n          map(surveyed => new Surveyed().deserialize(surveyed)) ,\r\n\r\n        );\r\n      }\r\n\r\n    deleteSurveyed(surveyed: Surveyed) {\r\n    const url = routes.surveyed(surveyed.id+\"\");\r\n\r\n    return this._http.delete<Surveyed>(url).pipe(\r\n      tap(_ => this.log(`deleted Surveyed id=${surveyed.id}`)),\r\n      catchError(this.handleError<Surveyed>('deletePopulation')),\r\n    );\r\n    }\r\n\r\n    deleteSurvey(survey: Surveyed) {\r\n      const url = routes.survey(survey.id+\"\");\r\n\r\n      return this._http.delete<Survey>(url).pipe(\r\n        tap(_ => this.log(`deleted Survey id=${survey.id}`)),\r\n        catchError(this.handleError<Population>('deletePopulation')),\r\n      );\r\n    }\r\n\r\n//HELPERS\r\neval_conditions(section, form: FormGroup, value, questions) {\r\n\r\n  section.questions.map((question: Question) => {\r\n\r\n    if( question.conditions.length>0){\r\n      let result = true;\r\n      question.conditions.forEach((condition) => {\r\n        let values = condition.value.split(\",\");\r\n        if (values.includes(value + \"\")) {\r\n          //set visibility to conditioned question\r\n          form.get(condition.question.label).setValidators(null);\r\n          form.get(condition.question.label).updateValueAndValidity();\r\n\r\n          //FIX question estructure.\r\n          if(questions.questions){\r\n            questions.questions[condition.question_index].show = false;\r\n          }else{\r\n            questions[condition.question_index].show = false;\r\n\r\n          }\r\n\r\n        } else {\r\n          form.get(condition.question.label).setValidators(Validators.required);\r\n          form.get(condition.question.label).updateValueAndValidity();\r\n          form.get(condition.question.label).enable();\r\n           //FIX question estructure.\r\n            if(questions.questions){\r\n              questions.questions[condition.question_index].show = true;\r\n            }else{\r\n              questions[condition.question_index].show = true;\r\n\r\n            }\r\n        }\r\n      });\r\n    }\r\n\r\n  });\r\n\r\n}\r\n\r\n\r\n}\r\n"],"names":[],"sourceRoot":"webpack:///"}