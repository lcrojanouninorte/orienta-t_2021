{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;UAEAA;AACA;AAAA;;AACA;;AACA;;AACA,sCAHA,CAIA;AACA;AACA;;AACAC;AACAA;AACAA;AACAC;AACAA;;AACA;AACA;AACA;;;;;iBACA;AACA;AACA;;AACA;AAAc;AACd;AACA;AACAA;AACAA;AACAC;;AACA;AACAC;AACA;AACA;AACA,aAVA,CAWA,YACA;AACA;AACA;;AACA;AACA;AACA;;;;iBACA;AACA;;AACA;AACA;AACAF;AACA;;AACA;AACA;AACA;;;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;;;UACAG;AACA;AAAA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;iBACA;AACA;AACA;AACAC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;iBACA;AACA;AACA;;;;;;AAEAD;AAAiD,qCAA4BE,uDAAgBC,qDAAhB,CAA5B;AAAoD,OAArG;;AACAH,yBAAkBE,iEAAqB;AAAGE;AAAwC,gCAAqBF,uDAAYC,qDAAZ,CAArB;AAAiD,SAA5F;AAA4FE,yBAA5F;AAA4FC;AAA5F,OAArB,CAAlB;;AACAN;AAAA,gBACA;AAAMO,yBAAN;AAAMC;AAAgCD,kBAAML,iDAAtC;AAA4CO,mBAASN,qDAAT;AAA5C;AAAN,SADA;AAAA;;AAGA;AAAe,2DAAmDD,gEAAwBF,UAAxB,EAAwB;AAC1FO,gBAAcL,qDAD4E;AAE1FO;AAAiBH;AAAjB;AAF0F,UAAxB,EAG7D;AAAiB;AAAUC,2BAAV;AAAUC;AAChCD,oBAAsBL,iDADU;AAEhCO,qBAAuBN,qDAAvB;AAFgC;AAAV;AAGF,SAN8C,EAM9C,IAN8C,CAAnD;AAMe,OAN9B;AAQA;AACA;AACA;AACA;AACA;AA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","names":["PendingCopy","styles","textarea","successful","currentFocus","Clipboard","pendingCopy","_angular_core__WEBPACK_IMPORTED_MODULE_0__","_angular_common__WEBPACK_IMPORTED_MODULE_1__","factory","token","providedIn","type","decorators","args","CdkCopyToClipboard","pending","attempt","clearTimeout","CKD_COPY_TO_CLIPBOARD_CONFIG","selectors","hostBindings","inputs","text","attempts","outputs","copied","selector","host","ClipboardModule","declarations","exports","Ng2SearchPipe","toCompare","property","item","name","pure","Ng2SearchPipeModule","ObsMapComponent","Date","toISOString","imgCanvas","gl_map","getCanvas","toDataURL","decls","vars","consts","template","SurveysFilterPipe","surveys","filter","survey","surveyed","indexOf","SharedModule","_angular_common__WEBPACK_IMPORTED_MODULE_3__","_nebular_theme__WEBPACK_IMPORTED_MODULE_4__","_pdf_templates_obs_map_obs_map_component__WEBPACK_IMPORTED_MODULE_0__","_pipes_surveys_filter_pipe__WEBPACK_IMPORTED_MODULE_1__","imports","_angular_core__WEBPACK_IMPORTED_MODULE_4__","ctx_r4","DashboardComponent","clipboard","_accessChecker","_authService","_surveyService","window","location","origin","getCurrentUser","subscribe","user","getActivePopulations","getSurveys","isGranted","getSurveys_all","getPopulations","next","populations","map","pop","active","active_population","loading","id","surveys_all","$event","copy","alert","viewQuery","_r2","ctx","routes","path","component","_dashboard_component__WEBPACK_IMPORTED_MODULE_1__","_population_view_population_view_component__WEBPACK_IMPORTED_MODULE_4__","loadChildren","DashboardModule","_nebular_theme__WEBPACK_IMPORTED_MODULE_10__","_theme_theme_module__WEBPACK_IMPORTED_MODULE_0__","_nebular_security__WEBPACK_IMPORTED_MODULE_11__","ngx_dropzone__WEBPACK_IMPORTED_MODULE_12__","_angular_forms__WEBPACK_IMPORTED_MODULE_13__","_angular_cdk_clipboard__WEBPACK_IMPORTED_MODULE_14__","_angular_router__WEBPACK_IMPORTED_MODULE_15__","_sweetalert2_ngx_sweetalert2__WEBPACK_IMPORTED_MODULE_16__","app_shared_shared_module__WEBPACK_IMPORTED_MODULE_7__","ng2_search_filter__WEBPACK_IMPORTED_MODULE_8__","_surveys_table_surveys_table_component__WEBPACK_IMPORTED_MODULE_2__","_population_add_population_add_component__WEBPACK_IMPORTED_MODULE_3__","_surveyed_add_surveyed_add_component__WEBPACK_IMPORTED_MODULE_5__","_populations_list_populations_list_component__WEBPACK_IMPORTED_MODULE_6__","_angular_core__WEBPACK_IMPORTED_MODULE_2__","f_r2","PopulationAddComponent","_dialog","_fb","form","group","addControl","_angular_forms__WEBPACK_IMPORTED_MODULE_3__","event","files","push","addedFiles","splice","valid","formData","toFormData","value","length","append","addPopulation","_angular_common_http__WEBPACK_IMPORTED_MODULE_4__","progress","Math","round","loaded","total","body","showToast","close","_core_data_remote_schemas_population__WEBPACK_IMPORTED_MODULE_0__","deserialize","population","message","error","_angular_core__WEBPACK_IMPORTED_MODULE_3__","surveyed_r1","PopulationViewComponent","_dialogService","_Activatedroute","population_id","snapshot","paramMap","get","pop_id","getPopulation","i","deleteSurveyed","surveyeds","ev","s","concat","pop_r1","_r5","PopulationsListComponent","environments_environment__WEBPACK_IMPORTED_MODULE_0__","open","_population_add_population_add_component__WEBPACK_IMPORTED_MODULE_1__","context","toString","onClose","delPopulations","activePopulations","onActivate","emit","SurveyedAddComponent","identification","last_name","addSurveyed","added","_core_data_remote_schemas_surveyed__WEBPACK_IMPORTED_MODULE_0__","survey_r1","SurveysTableComponent","_router","navigate","uuid","deleteSurvey","title"],"sources":["webpack:///node_modules/@angular/cdk/__ivy_ngcc__/fesm2015/clipboard.js","webpack:///node_modules/ng2-search-filter/__ivy_ngcc__/ng2-search-filter.js","webpack:///src/app/@shared/pdf-templates/obs-map/obs-map.component.ts","webpack:///src/app/@shared/pdf-templates/obs-map/obs-map.component.html","webpack:///src/app/@shared/pipes/surveys-filter.pipe.ts","webpack:///src/app/@shared/shared.module.ts","webpack:///src/app/pages/dashboard/dashboard.component.html","webpack:///src/app/pages/dashboard/dashboard.component.ts","webpack:///src/app/pages/dashboard/dashboard.module.ts","webpack:///src/app/pages/dashboard/population-add/population-add.component.html","webpack:///src/app/pages/dashboard/population-add/population-add.component.ts","webpack:///src/app/pages/dashboard/population-view/population-view.component.html","webpack:///src/app/pages/dashboard/population-view/population-view.component.ts","webpack:///src/app/pages/dashboard/populations-list/populations-list.component.html","webpack:///src/app/pages/dashboard/populations-list/populations-list.component.ts","webpack:///src/app/pages/dashboard/surveyed-add/surveyed-add.component.ts","webpack:///src/app/pages/dashboard/surveyed-add/surveyed-add.component.html","webpack:///src/app/pages/dashboard/surveys-table/surveys-table.component.html","webpack:///src/app/pages/dashboard/surveys-table/surveys-table.component.ts"],"sourcesContent":["import * as i1 from '@angular/common';\nimport { DOCUMENT } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { Injectable, Inject, InjectionToken, EventEmitter, Directive, NgZone, Optional, Input, Output, NgModule } from '@angular/core';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * A pending copy-to-clipboard operation.\n *\n * The implementation of copying text to the clipboard modifies the DOM and\n * forces a relayout. This relayout can take too long if the string is large,\n * causing the execCommand('copy') to happen too long after the user clicked.\n * This results in the browser refusing to copy. This object lets the\n * relayout happen in a separate tick from copying by providing a copy function\n * that can be called later.\n *\n * Destroy must be called when no longer in use, regardless of whether `copy` is\n * called.\n */\nimport * as ɵngcc0 from '@angular/core';\nclass PendingCopy {\n    constructor(text, _document) {\n        this._document = _document;\n        const textarea = this._textarea = this._document.createElement('textarea');\n        const styles = textarea.style;\n        // Hide the element for display and accessibility. Set a fixed position so the page layout\n        // isn't affected. We use `fixed` with `top: 0`, because focus is moved into the textarea\n        // for a split second and if it's off-screen, some browsers will attempt to scroll it into view.\n        styles.position = 'fixed';\n        styles.top = styles.opacity = '0';\n        styles.left = '-999em';\n        textarea.setAttribute('aria-hidden', 'true');\n        textarea.value = text;\n        this._document.body.appendChild(textarea);\n    }\n    /** Finishes copying the text. */\n    copy() {\n        const textarea = this._textarea;\n        let successful = false;\n        try { // Older browsers could throw if copy is not supported.\n            if (textarea) {\n                const currentFocus = this._document.activeElement;\n                textarea.select();\n                textarea.setSelectionRange(0, textarea.value.length);\n                successful = this._document.execCommand('copy');\n                if (currentFocus) {\n                    currentFocus.focus();\n                }\n            }\n        }\n        catch (_a) {\n            // Discard error.\n            // Initial setting of {@code successful} will represent failure here.\n        }\n        return successful;\n    }\n    /** Cleans up DOM changes used to perform the copy operation. */\n    destroy() {\n        const textarea = this._textarea;\n        if (textarea) {\n            if (textarea.parentNode) {\n                textarea.parentNode.removeChild(textarea);\n            }\n            this._textarea = undefined;\n        }\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * A service for copying text to the clipboard.\n */\nclass Clipboard {\n    constructor(document) {\n        this._document = document;\n    }\n    /**\n     * Copies the provided text into the user's clipboard.\n     *\n     * @param text The string to copy.\n     * @returns Whether the operation was successful.\n     */\n    copy(text) {\n        const pendingCopy = this.beginCopy(text);\n        const successful = pendingCopy.copy();\n        pendingCopy.destroy();\n        return successful;\n    }\n    /**\n     * Prepares a string to be copied later. This is useful for large strings\n     * which take too long to successfully render and be copied in the same tick.\n     *\n     * The caller must call `destroy` on the returned `PendingCopy`.\n     *\n     * @param text The string to copy.\n     * @returns the pending copy operation.\n     */\n    beginCopy(text) {\n        return new PendingCopy(text, this._document);\n    }\n}\nClipboard.ɵfac = function Clipboard_Factory(t) { return new (t || Clipboard)(ɵngcc0.ɵɵinject(DOCUMENT)); };\nClipboard.ɵprov = i0.ɵɵdefineInjectable({ factory: function Clipboard_Factory() { return new Clipboard(i0.ɵɵinject(i1.DOCUMENT)); }, token: Clipboard, providedIn: \"root\" });\nClipboard.ctorParameters = () => [\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(Clipboard, [{\n        type: Injectable,\n        args: [{ providedIn: 'root' }]\n    }], function () { return [{ type: undefined, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }]; }, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Injection token that can be used to provide the default options to `CdkCopyToClipboard`. */\nconst CDK_COPY_TO_CLIPBOARD_CONFIG = new InjectionToken('CDK_COPY_TO_CLIPBOARD_CONFIG');\n/**\n * @deprecated Use `CDK_COPY_TO_CLIPBOARD_CONFIG` instead.\n * @breaking-change 13.0.0\n */\nconst CKD_COPY_TO_CLIPBOARD_CONFIG = CDK_COPY_TO_CLIPBOARD_CONFIG;\n/**\n * Provides behavior for a button that when clicked copies content into user's\n * clipboard.\n */\nclass CdkCopyToClipboard {\n    constructor(_clipboard, _ngZone, config) {\n        this._clipboard = _clipboard;\n        this._ngZone = _ngZone;\n        /** Content to be copied. */\n        this.text = '';\n        /**\n         * How many times to attempt to copy the text. This may be necessary for longer text, because\n         * the browser needs time to fill an intermediate textarea element and copy the content.\n         */\n        this.attempts = 1;\n        /**\n         * Emits when some text is copied to the clipboard. The\n         * emitted value indicates whether copying was successful.\n         */\n        this.copied = new EventEmitter();\n        /** Copies that are currently being attempted. */\n        this._pending = new Set();\n        if (config && config.attempts != null) {\n            this.attempts = config.attempts;\n        }\n    }\n    /** Copies the current text to the clipboard. */\n    copy(attempts = this.attempts) {\n        if (attempts > 1) {\n            let remainingAttempts = attempts;\n            const pending = this._clipboard.beginCopy(this.text);\n            this._pending.add(pending);\n            const attempt = () => {\n                const successful = pending.copy();\n                if (!successful && --remainingAttempts && !this._destroyed) {\n                    // We use 1 for the timeout since it's more predictable when flushing in unit tests.\n                    this._currentTimeout = this._ngZone.runOutsideAngular(() => setTimeout(attempt, 1));\n                }\n                else {\n                    this._currentTimeout = null;\n                    this._pending.delete(pending);\n                    pending.destroy();\n                    this.copied.emit(successful);\n                }\n            };\n            attempt();\n        }\n        else {\n            this.copied.emit(this._clipboard.copy(this.text));\n        }\n    }\n    ngOnDestroy() {\n        if (this._currentTimeout) {\n            clearTimeout(this._currentTimeout);\n        }\n        this._pending.forEach(copy => copy.destroy());\n        this._pending.clear();\n        this._destroyed = true;\n    }\n}\nCdkCopyToClipboard.ɵfac = function CdkCopyToClipboard_Factory(t) { return new (t || CdkCopyToClipboard)(ɵngcc0.ɵɵdirectiveInject(Clipboard), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(CKD_COPY_TO_CLIPBOARD_CONFIG, 8)); };\nCdkCopyToClipboard.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: CdkCopyToClipboard, selectors: [[\"\", \"cdkCopyToClipboard\", \"\"]], hostBindings: function CdkCopyToClipboard_HostBindings(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"click\", function CdkCopyToClipboard_click_HostBindingHandler() { return ctx.copy(); });\n    } }, inputs: { text: [\"cdkCopyToClipboard\", \"text\"], attempts: [\"cdkCopyToClipboardAttempts\", \"attempts\"] }, outputs: { copied: \"cdkCopyToClipboardCopied\" } });\nCdkCopyToClipboard.ctorParameters = () => [\n    { type: Clipboard },\n    { type: NgZone },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [CKD_COPY_TO_CLIPBOARD_CONFIG,] }] }\n];\nCdkCopyToClipboard.propDecorators = {\n    text: [{ type: Input, args: ['cdkCopyToClipboard',] }],\n    attempts: [{ type: Input, args: ['cdkCopyToClipboardAttempts',] }],\n    copied: [{ type: Output, args: ['cdkCopyToClipboardCopied',] }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkCopyToClipboard, [{\n        type: Directive,\n        args: [{\n                selector: '[cdkCopyToClipboard]',\n                host: {\n                    '(click)': 'copy()'\n                }\n            }]\n    }], function () { return [{ type: Clipboard }, { type: ɵngcc0.NgZone }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [CKD_COPY_TO_CLIPBOARD_CONFIG]\n            }] }]; }, { text: [{\n            type: Input,\n            args: ['cdkCopyToClipboard']\n        }], attempts: [{\n            type: Input,\n            args: ['cdkCopyToClipboardAttempts']\n        }], copied: [{\n            type: Output,\n            args: ['cdkCopyToClipboardCopied']\n        }] }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass ClipboardModule {\n}\nClipboardModule.ɵfac = function ClipboardModule_Factory(t) { return new (t || ClipboardModule)(); };\nClipboardModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: ClipboardModule });\nClipboardModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({});\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ClipboardModule, [{\n        type: NgModule,\n        args: [{\n                declarations: [CdkCopyToClipboard],\n                exports: [CdkCopyToClipboard]\n            }]\n    }], null, null); })();\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(ClipboardModule, { declarations: [CdkCopyToClipboard], exports: [CdkCopyToClipboard] }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { CDK_COPY_TO_CLIPBOARD_CONFIG, CKD_COPY_TO_CLIPBOARD_CONFIG, CdkCopyToClipboard, Clipboard, ClipboardModule, PendingCopy };\n\n","import { Injectable, NgModule, Pipe } from '@angular/core';\n\nimport * as ɵngcc0 from '@angular/core';\nclass Ng2SearchPipe {\n    /**\n     * @param {?} items object from array\n     * @param {?} term term's search\n     * @return {?}\n     */\n    transform(items, term) {\n        if (!term || !items)\n            return items;\n        return Ng2SearchPipe.filter(items, term);\n    }\n    /**\n     *\n     * @param {?} items List of items to filter\n     * @param {?} term  a string term to compare with every property of the list\n     *\n     * @return {?}\n     */\n    static filter(items, term) {\n        const /** @type {?} */ toCompare = term.toLowerCase();\n        /**\n         * @param {?} item\n         * @param {?} term\n         * @return {?}\n         */\n        function checkInside(item, term) {\n            for (let /** @type {?} */ property in item) {\n                if (item[property] === null || item[property] == undefined) {\n                    continue;\n                }\n                if (typeof item[property] === 'object') {\n                    if (checkInside(item[property], term)) {\n                        return true;\n                    }\n                }\n                if (item[property].toString().toLowerCase().includes(toCompare)) {\n                    return true;\n                }\n            }\n            return false;\n        }\n        return items.filter(function (item) {\n            return checkInside(item, term);\n        });\n    }\n}\nNg2SearchPipe.ɵfac = function Ng2SearchPipe_Factory(t) { return new (t || Ng2SearchPipe)(); };\nNg2SearchPipe.ɵpipe = /*@__PURE__*/ ɵngcc0.ɵɵdefinePipe({ name: \"filter\", type: Ng2SearchPipe, pure: false });\nNg2SearchPipe.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: Ng2SearchPipe, factory: Ng2SearchPipe.ɵfac });\n/**\n * @nocollapse\n */\nNg2SearchPipe.ctorParameters = () => [];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(Ng2SearchPipe, [{\n        type: Pipe,\n        args: [{\n                name: 'filter',\n                pure: false\n            }]\n    }, {\n        type: Injectable\n    }], null, null); })();\n\nclass Ng2SearchPipeModule {\n}\nNg2SearchPipeModule.ɵfac = function Ng2SearchPipeModule_Factory(t) { return new (t || Ng2SearchPipeModule)(); };\nNg2SearchPipeModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: Ng2SearchPipeModule });\nNg2SearchPipeModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({});\n/**\n * @nocollapse\n */\nNg2SearchPipeModule.ctorParameters = () => [];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(Ng2SearchPipeModule, [{\n        type: NgModule,\n        args: [{\n                declarations: [Ng2SearchPipe],\n                exports: [Ng2SearchPipe]\n            }]\n    }], null, null); })();\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(Ng2SearchPipeModule, { declarations: [Ng2SearchPipe], exports: [Ng2SearchPipe] }); })();\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { Ng2SearchPipeModule, Ng2SearchPipe };\n\n","import { Component, OnInit, Input } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'ngx-obs-map',\r\n  templateUrl: './obs-map.component.html',\r\n  styleUrls: ['./obs-map.component.scss'],\r\n})\r\nexport class ObsMapComponent implements OnInit {\r\n  @Input() gl_map: any;\r\n  date: any;\r\n  constructor(\r\n\r\n  ) { }\r\n  ngOnInit(): void {\r\n  }\r\n  getDate() {\r\n   return new Date().toISOString();\r\n  }\r\n\r\n  getMapImg() {\r\n    const imgCanvas = this.gl_map.getCanvas().toDataURL('image/PNG');\r\n  }\r\n}\r\n","<!-- Define header and footer blocks before your content -->\r\n<header>\r\n    <div class=\"d-flex justify-content-between mb-5\">\r\n        <img class=\" d-flex mt-2 ml-5 align-self-strech\" src=\"assets/img/logo.jpg\" width=\"150\" alt=\"OBS\">\r\n        <img class=\"d-flex mt-1 mr-5 align-self-center\" src=\"assets/img/LogoUninorte.png\" width=\"150\" alt=\"uninorte\">\r\n    </div>\r\n</header>\r\n\r\n\r\n<main class=\"container mt-5\">\r\n    <div class=\"d-flex flex-column justify-content-center\">\r\n        <h2 class=\"text-center align-self-center mb-2\"> Observatorio del Río Magdalena</h2>\r\n        <h4 class=\"text-center align-self-center mb-2\"> Universidad del norte</h4>\r\n\r\n        <h6 class=\"text-center align-self-center mb-4\">Fecha del reporte:\r\n            <?php echo date(\"Y-m-d, H:m:s A\");?>\r\n        </h6>\r\n    </div>\r\n    <div class=\" d-flex justify-content-center mb-5\">\r\n        <div class=\" d-flex justify-content-center  shadow-sm\">\r\n            <div class=\" align-self-center\">\r\n                <img [src]=\"getMapImg()\" width=\"200\" alt=\"ubicación\">\r\n            </div>\r\n\r\n\r\n        </div>\r\n    </div>\r\n\r\n\r\n</main>\r\n<footer>\r\n    Observatorio del Río Magdalena - Universidad del Norte Copyright &copy;\r\n    <p [innerHTML]=\"getDate()\"></p>\r\n</footer>","import { Pipe, PipeTransform } from '@angular/core';\r\nimport { Survey } from '@core/data/remote/schemas/survey';\r\n\r\n@Pipe({\r\n  name: 'surveysFilter'\r\n})\r\nexport class SurveysFilterPipe implements PipeTransform {\r\n\r\n  transform(surveys: Survey[], filter: any): any {\r\n    if (!surveys || !filter) {\r\n        return surveys;\r\n    }\r\n    // filter items array, items which match and return true will be\r\n    // kept, false will be filtered out\r\n    return surveys.filter(survey => survey.surveyed.name.indexOf(filter.name) !== -1);\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { NbAutocompleteModule, NbInputModule, NbCardModule, NbSelectModule, } from '@nebular/theme';\r\nimport { ObsMapComponent } from './pdf-templates/obs-map/obs-map.component';\r\nimport { SurveysFilterPipe } from './pipes/surveys-filter.pipe';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    NbAutocompleteModule,\r\n    NbInputModule,\r\n    NbCardModule,\r\n    NbSelectModule,\r\n\r\n  ],\r\n  declarations: [  ObsMapComponent, SurveysFilterPipe ],\r\n  exports:      [ ObsMapComponent,\r\n                 CommonModule,SurveysFilterPipe ]\r\n})\r\nexport class SharedModule { }\r\n","<div class=\"container\">\r\n    <div class=\"row\">\r\n        <div class=\"col-md-5\">\r\n\r\n            <div style=\"width: 100%\" *ngIf=\"_accessChecker.isGranted('Register Admin', 'all') | async\">\r\n                <ngx-populations-list (onActivate)=\"onActivate($event)\"></ngx-populations-list>\r\n            </div>\r\n            <nb-card style=\"width: 100%\">\r\n                <nb-card-body>\r\n                    <div>\r\n                        <h2>Hola {{ user.name }},</h2>\r\n                        <div>\r\n                            <p></p>\r\n                            <b>Instrucción*:</b>\r\n                            <p></p>\r\n                            <p> Utilice este link para realizar la encuesta. </p>\r\n\r\n                            <div *ngIf=\"active_population; else elseBlock\">\r\n                                <mark>\r\n                                  <b>\r\n                                    Enlace de Encuesta:\r\n                                    <a href=\"#/encuesta/{{ active_population?.id }}/{{\r\n                                        user.id\r\n                                      }}\" target=\"_blank\">\r\n                                      <b class=\"text-info\">{{ origin }}/#/encuesta/{{ active_population?.id }}/{{\r\n                                        user.id\r\n                                        }}</b></a>\r\n                              </b>\r\n                              </mark>\r\n                                <p></p>\r\n                                <div class=\"mt-2\">\r\n                                    <button nbButton size=\"small\" status=\"info\" (click)=\"copyToClipBoard()\">\r\n                                <nb-icon icon=\"copy-outline\"></nb-icon> Copiar Enlace\r\n                              </button>\r\n                                </div>\r\n\r\n                            </div>\r\n                        </div>\r\n                        <ng-template #elseBlock>\r\n                            <div class=\"dflex flex-column justify-content-center\">\r\n                                <p>Actualmente no hay campañas activas.</p>\r\n                            </div>\r\n                        </ng-template>\r\n                    </div>\r\n\r\n                </nb-card-body>\r\n                <nb-card-footer class=\"text-right color-info\">\r\n                    <b> Campaña Activa: {{ active_population?.name }} </b>\r\n                </nb-card-footer>\r\n            </nb-card>\r\n\r\n        </div>\r\n        <div class=\"col-md-7\">\r\n            <div class=\"row\" *ngIf=\"_accessChecker.isGranted('Register Admin', 'all') | async\">\r\n\r\n                <div class=\"col-sm-12\">\r\n\r\n\r\n\r\n\r\n                    <ngx-surveys-table [title]=\"'Todas las encuestas'\" [surveys]=\"surveys_all\" [user]=\"user\"> </ngx-surveys-table>\r\n\r\n\r\n                </div>\r\n            </div>\r\n            <ngx-surveys-table [title]=\"'Mis Encuestas'\" [surveys]=\"surveys\" [user]=\"user\"> </ngx-surveys-table>\r\n        </div>\r\n    </div>\r\n\r\n\r\n\r\n</div>\r\n","import { Component, ElementRef, Inject, ViewChild } from '@angular/core';\r\nimport { Population } from '@core/data/remote/schemas/population';\r\nimport { SurveyService } from '@core/data/remote/services/survey.service';\r\nimport { NbDialogService } from '@nebular/theme';\r\nimport { User } from '../../@core/data/remote/schemas/users';\r\nimport { AuthService } from '../../@core/data/remote/services/auth.service';\r\nimport { PopulationAddComponent } from './population-add/population-add.component';\r\nimport { Clipboard } from '@angular/cdk/clipboard'\r\nimport { NbAccessChecker } from '@nebular/security';\r\n\r\n@Component({\r\n  selector: 'ngx-dashboard',\r\n  templateUrl: './dashboard.component.html',\r\n})\r\n\r\nexport class DashboardComponent {\r\n  public user:  User = null;\r\n  populations: Population[];\r\n  origin: string = window.location.origin;\r\n  active_population: Population = null;\r\n  loading: boolean;\r\n  surveys: any;\r\n  surveys_all: any;\r\n\r\n  constructor(\r\n    private clipboard: Clipboard,\r\n    public _accessChecker: NbAccessChecker,\r\n\r\n    private _authService: AuthService,\r\n    private _surveyService: SurveyService,\r\n    ) {\r\n   _authService.getCurrentUser().subscribe(\r\n     (user) => {\r\n       this.user = user;\r\n        this.getActivePopulations();\r\n        this.getSurveys();\r\n        if(_accessChecker.isGranted('Register Admin', 'all')){\r\n          this.getSurveys_all();\r\n        }\r\n  }\r\n   );\r\n\r\n  }\r\n  @ViewChild('link')  link_container: ElementRef;\r\n  getActivePopulations(){\r\n    this._surveyService.getPopulations().subscribe({\r\n      next: (populations: Array<Population>) => {\r\n        this.populations = populations;\r\n        this.populations.map((pop:Population)=>{\r\n            if(pop.active){\r\n              this.active_population = pop;\r\n            }\r\n        })\r\n      }\r\n    });\r\n  }\r\n  getSurveys(){\r\n\r\n    this.loading = true;\r\n    this._surveyService.getSurveys(this.user.id+\"\").subscribe({\r\n      next: (surveys: any) => {\r\n        this.surveys = surveys;\r\n        this.loading = false;\r\n\r\n\r\n       },\r\n    })\r\n  }\r\n  getSurveys_all(){\r\n\r\n    this.loading = true;\r\n    this._surveyService.getSurveys(\"all\").subscribe({\r\n      next: (surveys_all: any) => {\r\n        this.surveys_all = surveys_all;\r\n        this.loading = false;\r\n\r\n\r\n       },\r\n    })\r\n  }\r\n  onActivate($event){\r\n    this.getActivePopulations();\r\n    this.getSurveys();\r\n    if(this._accessChecker.isGranted('Register Admin', 'all')){\r\n      this.getSurveys_all();\r\n    }\r\n  }\r\n\r\n\r\n  copyToClipBoard(){\r\n    this.clipboard.copy(this.origin+'/#/encuesta/'+this.active_population.id+'/'+this.user.id);\r\n    alert(`Enlace copiado`)\r\n\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { NbActionsModule, NbButtonModule, NbCardModule, NbDialogModule, NbFormFieldModule, NbIconModule, NbInputModule, NbListModule, NbProgressBarModule, NbSpinnerModule, NbUserModule } from '@nebular/theme';\r\n\r\nimport { ThemeModule } from '../../@theme/theme.module';\r\nimport { DashboardComponent } from './dashboard.component';\r\nimport { NbSecurityModule } from '@nebular/security';\r\nimport { RouterModule, Routes } from '@angular/router';\r\nimport { SurveysTableComponent } from './surveys-table/surveys-table.component';\r\nimport { PopulationAddComponent } from './population-add/population-add.component';\r\nimport { NgxDropzoneModule } from 'ngx-dropzone';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport { PopulationViewComponent } from './population-view/population-view.component';\r\nimport { SurveyedAddComponent } from './surveyed-add/surveyed-add.component';\r\nimport { ClipboardModule } from '@angular/cdk/clipboard';\r\nimport { PopulationsListComponent } from './populations-list/populations-list.component'\r\nimport { SweetAlert2Module } from '@sweetalert2/ngx-sweetalert2';\r\nimport { SharedModule } from 'app/@shared/shared.module';\r\nimport { Ng2SearchPipeModule } from 'ng2-search-filter';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '',\r\n    component: DashboardComponent,\r\n  },\r\n  {\r\n    path: 'audience/:population_id',\r\n    component: PopulationViewComponent,\r\n  },\r\n  {\r\n    path: 'encuesta/:id',\r\n    loadChildren: 'app/pages/onu-mujeres/onu-mujeres-routing.module#OnuMujeresRoutingModule'\r\n  },\r\n\r\n];\r\n@NgModule({\r\n  imports: [\r\n    NbCardModule,\r\n    ThemeModule,\r\n    NbIconModule,\r\n    NbSecurityModule,\r\n    NbListModule,\r\n    NbCardModule,\r\n    NbActionsModule,\r\n    NbInputModule,\r\n    NbButtonModule,\r\n    NbSpinnerModule,\r\n    NbDialogModule.forChild(),\r\n    NgxDropzoneModule,\r\n    NbProgressBarModule,\r\n    ReactiveFormsModule,\r\n    FormsModule,\r\n    ClipboardModule,\r\n    RouterModule.forChild(routes),\r\n    SweetAlert2Module,\r\n    NbUserModule,\r\n    NbFormFieldModule,\r\n    SharedModule,\r\n    Ng2SearchPipeModule\r\n  ],\r\n  exports: [\r\n    RouterModule\r\n  ],\r\n  declarations: [\r\n    DashboardComponent,\r\n    SurveysTableComponent,\r\n    PopulationAddComponent,\r\n    PopulationViewComponent,\r\n    SurveyedAddComponent,\r\n    PopulationsListComponent,\r\n  ],\r\n})\r\n\r\nexport class DashboardModule { }\r\n","<nb-card size=\"large\" [nbSpinner]=\"loading\" nbSpinnerStatus=\"danger\" nbSpinnerSize=\"large\" nbSpinnerMessage=\"\">\r\n    <nb-card-header>Agregar/Editar Ocupación</nb-card-header>\r\n    <nb-card-body>\r\n        <div class=\"row\">\r\n\r\n\r\n            <div class=\"col-md-12\">\r\n                <div class=\"form-group row\">\r\n\r\n                    <label for=\"name\" class=\"label col-sm-4 col-form-label\">Codigo</label>\r\n                    <form [formGroup]=\"form\" class=\"col-sm-12\">\r\n                        <input formControlName=\"name\" type=\"text\" nbInput fullWidth id=\"name\" placeholder=\"Nombre de Campaña\">\r\n\r\n                    </form>\r\n\r\n                </div>\r\n                <div class=\"form-group row\">\r\n\r\n                    <label for=\"name\" class=\"label col-sm-4 col-form-label\">Nombre</label>\r\n                    <form [formGroup]=\"form\" class=\"col-sm-12\">\r\n                        <input formControlName=\"name\" type=\"text\" nbInput fullWidth id=\"name\" placeholder=\"Nombre de Campaña\">\r\n\r\n                    </form>\r\n\r\n                </div>\r\n                <div class=\"form-group row\">\r\n\r\n                    <label for=\"name\" class=\"label col-sm-4 col-form-label\">Descripción</label>\r\n                    <form [formGroup]=\"form\" class=\"col-sm-12\">\r\n                        <textarea nbInput fullWidth placeholder=\"Descripción\"></textarea>\r\n\r\n                    </form>\r\n\r\n                </div>\r\n\r\n                <div class=\"form-group row\">\r\n                    <label for=\"name\" class=\"label col-sm-4 col-form-label\">Icono</label>\r\n                    <ngx-dropzone style=\"width: 100%;\" [multiple]=\"false\" [maxFileSize]=\"'1000000'\" (change)=\"onSelect($event)\">\r\n                        <ngx-dropzone-image-preview *ngFor=\"let f of files\" [removable]=\"true\" [file]=\"f\" (removed)=\"onRemove(f)\">\r\n                            <ngx-dropzone-label>{{ f.name }} </ngx-dropzone-label>\r\n                        </ngx-dropzone-image-preview>\r\n                    </ngx-dropzone>\r\n\r\n                </div>\r\n                <div class=\"form-group col\">\r\n                    <label for=\"name\" class=\"label col-sm-4 col-form-label\">Habilidades</label>\r\n                    <nb-list>\r\n\r\n                        <nb-list-item>\r\n\r\n                            Abogados\r\n                        </nb-list-item>\r\n                        <nb-list-item>\r\n\r\n                            Funcionarios de Programas Exclusivos de la Administración Pública\r\n                        </nb-list-item>\r\n                        <nb-list-item>\r\n\r\n                            Asistentes Legales y Afines\r\n                        </nb-list-item>\r\n                        <nb-list-item>\r\n\r\n                            Periodistas\r\n                        </nb-list-item>\r\n                        <nb-list-item>\r\n\r\n                            Ocupaciones Profesionales en Relaciones Públicas y Comunicaciones\r\n                        </nb-list-item>\r\n                        <nb-list-item>\r\n\r\n                            Otras Ocupaciones Técnicas en Cine, Televisión y Artes Escénicas n.c.a.\r\n                        </nb-list-item>\r\n                        <nb-list-item>\r\n                            Jueces\r\n                        </nb-list-item>\r\n                    </nb-list>\r\n\r\n                </div>\r\n\r\n\r\n\r\n\r\n\r\n                <nb-progress-bar *ngIf=\"progress>0\" [value]=\"progress\"></nb-progress-bar>\r\n\r\n\r\n\r\n            </div>\r\n        </div>\r\n    </nb-card-body>\r\n    <nb-card-footer>\r\n        <div class=\"form-group row \">\r\n            <div class=\"col-sm-12 text-center\">\r\n\r\n                <button status=\"info\" class=\"text-center\" nbButton (click)=\"onSubmit()\">Crear</button>\r\n            </div>\r\n        </div>\r\n    </nb-card-footer>\r\n</nb-card>","import { HttpEventType } from '@angular/common/http';\r\nimport { Component, OnInit } from '@angular/core';\r\nimport { FormBuilder, FormControl, FormGroup, Validators } from '@angular/forms';\r\nimport { Population } from '@core/data/remote/schemas/population';\r\nimport { SurveyService } from '@core/data/remote/services/survey.service';\r\nimport { NbDialogRef } from '@nebular/theme';\r\n\r\n@Component({\r\n  selector: 'ngx-population-add',\r\n  templateUrl: './population-add.component.html',\r\n  styleUrls: ['./population-add.component.scss']\r\n})\r\nexport class PopulationAddComponent implements OnInit {\r\n  public files: Array<File> = [];\r\n  loading: boolean;\r\n  public form: FormGroup;\r\n   progress: number = 0;\r\n  error: boolean;\r\n  message: string;\r\n\r\n  constructor(\r\n    private _dialog: NbDialogRef<PopulationAddComponent>,\r\n    private _surveyService: SurveyService,\r\n    private _fb: FormBuilder\r\n    ) {\r\n        this.form = this._fb.group({});\r\n        this.form.addControl( \"name\", new FormControl('', Validators.required));\r\n    }\r\n\r\n  ngOnInit(): void {\r\n\r\n  }\r\n  onSelect(event) {\r\n    this.files.push(...event.addedFiles);\r\n  }\r\n  onRemove(event) {\r\n    this.files.splice(this.files.indexOf(event), 1);\r\n  }\r\n\r\n  onSubmit(){\r\n    if(this.form.valid){\r\n      //submit session\r\n      this.loading = true;\r\n      const formData = this._surveyService.toFormData(this.form.value);\r\n      if (this.files.length > 0) {\r\n        formData.append('file', this.files[0]);\r\n      }\r\n      this._surveyService.addPopulation(formData)\r\n      .subscribe({\r\n        next: (event => {\r\n            if ( event.type === HttpEventType.UploadProgress ) {\r\n              this.progress = Math.round((100 * event.loaded) / event.total);\r\n            }\r\n            if ( event.type === HttpEventType.Response) {\r\n              if(event.body.type == 1 ){\r\n                this._surveyService.showToast('top rigth', 'success', 'Agregado Correctamente');\r\n                this._dialog.close( new Population().deserialize(event.body.population)  );\r\n\r\n              }\r\n\r\n\r\n              //0: no esta en base de datos\r\n              //1: nombre no coincide con base de datos\r\n              //2: encuesta por terminar\r\n              //3: encuesta terminada.\r\n              //4: nueva encuesta\r\n\r\n\r\n                if(event.body.type == 2){\r\n                  this.message = \"Población no fue creada\"\r\n                }\r\n                this.progress = 0;\r\n                this.loading = false;\r\n                this.error = true;\r\n            }\r\n        }),\r\n        error: (error => {\r\n          this._surveyService.showToast('top rigth', 'danger', error);\r\n          this.loading = false;\r\n          this.error = true;\r\n          this.progress = 0;\r\n          this.message =error.message;\r\n        }),\r\n      });\r\n\r\n    //  this.stepper.next();\r\n\r\n    }else{\r\n      // this.validateAllFormFields(form); //{7}\r\n      //this.stepper.next();\r\n    }\r\n  }\r\n}\r\n","<div class=\" col-md-8 offset-md-2 \">\r\n\r\n\r\n    <ngx-surveyed-add [population_id]=\"population?.id\" (added)=\"onAdded($event)\"></ngx-surveyed-add>\r\n\r\n    <div class=\"row\">\r\n        <div class=\"col-md-12\">\r\n            <nb-card class=\"list-card\" size=\"large\">\r\n                <nb-card-header class=\"d-flex justify-content-between\">\r\n                    <div>\r\n                        Campaña: {{population?.name}}\r\n\r\n                        <div class=\"label text-left\">\r\n                            Encuestados: {{population?.surveyeds.length }} / Encuestas: {{population?.surveys.length }}\r\n                        </div>\r\n                    </div>\r\n                    <div>\r\n                        <!--\r\n                        <span class=\"caption\"> Archivo Excel:</span>\r\n                        <a *ngIf=\"population.file_path\" [href]=\"population.file_path\">\r\n                            <img  width=\"40\" src=\"assets/img/icons/xls.png\" alt=\"xls\">\r\n\r\n                        </a>\r\n                        <a *ngIf=\"!population.file_path\" [href]=\"population.file_path\">\r\n                          <img  width=\"40\" src=\"assets/img/icons/xls.png\" alt=\"xls\">\r\n\r\n                      </a>-->\r\n                    </div>\r\n                </nb-card-header>\r\n                <nb-list>\r\n                    <nb-list-item class=\"d-flex justify-content-between\" *ngFor=\"let surveyed of  population?.surveyeds; let i = index\" role=\"list\">\r\n                        <nb-user [name]=\"surveyed.name\" [title]=\"surveyed.identification\">\r\n                        </nb-user>\r\n                        <nb-actions class=\"d-flex justify-content-between\" size=\"small\" fullWidth>\r\n                            <nb-action *ngIf=\"surveyed.survey\">\r\n                                <span class=\"text-success\" *ngIf=\"surveyed.survey.isFinished\">Finalizada</span>\r\n                                <span class=\"text-info\" *ngIf=\"!surveyed.survey.isFinished\">En progreso</span>\r\n\r\n                            </nb-action>\r\n                            <nb-action *ngIf=\"surveyed.survey\">\r\n\r\n\r\n\r\n\r\n                                <a href=\"#/encuesta/1/{{surveyed.survey.user_id}}/{{surveyed.survey.uuid}}\" target=\"_blank\">\r\n                                    <nb-icon icon=\"external-link-outline\" status=\"info\">\r\n\r\n                                    </nb-icon>\r\n                                </a>\r\n\r\n                            </nb-action>\r\n                            <nb-action href=\"#\" [swal]=\"deleteSwal\">\r\n                                <nb-icon class=\"action-icon\" icon=\"trash-2-outline\"></nb-icon>\r\n                                <span>Borrar</span>\r\n                                <swal #deleteSwal title=\"Seguro que desea eliminar al encuestado {{ surveyed.name }}?\" text=\"Esto no se puede deshacer\" icon=\"question\" [showCancelButton]=\"true\" [focusCancel]=\"true\" (confirm)=\"deleteSurveyed(surveyed, i)\">\r\n                                </swal>\r\n\r\n                            </nb-action>\r\n\r\n                        </nb-actions>\r\n\r\n\r\n\r\n                    </nb-list-item>\r\n                </nb-list>\r\n            </nb-card>\r\n        </div>\r\n\r\n    </div>\r\n\r\n\r\n</div>\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { Population } from '@core/data/remote/schemas/population';\r\nimport { Surveyed } from '@core/data/remote/schemas/surveyed';\r\nimport { AuthService } from '@core/data/remote/services/auth.service';\r\nimport { SurveyService } from '@core/data/remote/services/survey.service';\r\nimport { NbDialogService } from '@nebular/theme';\r\n\r\n@Component({\r\n  selector: 'ngx-population-view',\r\n  templateUrl: './population-view.component.html',\r\n  styleUrls: ['./population-view.component.scss']\r\n})\r\nexport class PopulationViewComponent implements OnInit {\r\n  populations: Population[];\r\n  population_id: string;\r\n  population: Population;\r\n\r\n  constructor( _authService: AuthService,\r\n    private _surveyService: SurveyService,\r\n    private _dialogService: NbDialogService,\r\n    private _Activatedroute:ActivatedRoute,\r\n    ) { }\r\n\r\n  ngOnInit(): void {\r\n    this.population_id = this._Activatedroute.snapshot.paramMap.get(\"population_id\");\r\n\r\n    this.getPopulations(this.population_id);\r\n  }\r\n  getPopulations(pop_id){\r\n    this._surveyService.getPopulation(pop_id).subscribe({\r\n      next: (population: Population) => {\r\n        this.population = population;\r\n      }\r\n    });\r\n  }\r\n\r\n  deleteSurveyed(surveyed,i ){\r\n    this._surveyService.deleteSurveyed(surveyed).subscribe({\r\n      next: (surveyed: Surveyed) => {\r\n        this.population.surveyeds.splice(i,1);\r\n        this._surveyService.showToast(\"rigth\", \"success\", \"Borrado Correctamente\")\r\n      }\r\n    });\r\n  }\r\n\r\n   onAdded(ev: Surveyed){\r\n     const s   = [ev].concat(this.population.surveyeds);\r\n     this.population.surveyeds  = s ;\r\n     this._surveyService.showToast(\"rigth\", \"success\", \"Agregado Correctamente\")\r\n\r\n  }\r\n\r\n\r\n\r\n}\r\n","<nb-card size=\"large\">\r\n\r\n    <nb-card-body>\r\n\r\n        <h2>\r\n            Campañas\r\n        </h2>\r\n        <p class=\"caption\">\r\n            Usted debe crear una campaña para cada periodo de aplicación de la encuesta. Las campañas ayudan a segmentar la encuesta por periodo o población. Tenga en cuenta que solo una campaña permanecerá activa </p>\r\n        <div>\r\n            <b>Instrucciones*:</b>\r\n            <p></p>\r\n            <p>1. Dar clic en crear Campaña y seguir instrucciones</p>\r\n            <p>2. Activar la campaña creada, presionando el botón\r\n                <nb-icon icon=\"play-circle-outline\" status=\"success\"></nb-icon>\r\n            </p>\r\n\r\n        </div>\r\n\r\n        <button status=\"info\" size=\"small\" class=\"col mt-2 text-right\" nbButton (click)=\"addPopulation()\"><nb-icon icon=\"plus-circle-outline\"></nb-icon> Campaña</button>\r\n\r\n        <nb-list class=\"row mt-3\">\r\n            <nb-list-item class=\"d-flex justify-content-between align-items-stretch\" *ngFor=\"let pop of populations; let i = index;\">\r\n\r\n                <nb-user [badgeText]=\"pop?.active?'Activa':''\" badgeStatus=\"success\" badgePosition=\"bottom right\" size=\"tiny\" [name]=\"pop?.name\">\r\n                </nb-user>\r\n\r\n\r\n                <nb-actions fullWidth size=\"small\">\r\n\r\n                    <nb-action title=\"Borrar Campaña\" [swal]=\"deleteSwal\" icon=\"trash-outline\" status=\"warning\">\r\n                        <swal #deleteSwal title=\"Seguro que desea eliminar la campaña: {{ pop?.name }}?\" text=\"Esto no se puede deshacer\" icon=\"question\" [showCancelButton]=\"true\" [focusCancel]=\"true\" (confirm)=\"deletePopulation(pop, i)\">\r\n                        </swal>\r\n\r\n                    </nb-action>\r\n\r\n                    <nb-action title=\"Encuestados\" class=\"d-flex justify-content-between\">\r\n                        <a href=\"#/dashboard/audience/{{pop?.id}}\" target=\"_blank\">\r\n                        {{pop?.surveys.length}}\r\n                      </a> / <a href=\"#/dashboard/audience/{{pop?.id}}\" target=\"_blank\">\r\n                        {{pop?.surveyeds.length}}\r\n                      </a>\r\n\r\n                    </nb-action>\r\n\r\n                    <nb-action status=\"info\" title=\"Link\">\r\n                        <a href=\"#/encuesta/{{pop?.id}}/{{user.id}}\" target=\"_blank\">\r\n                            <nb-icon icon=\"link-outline\"></nb-icon>\r\n                        </a>\r\n                    </nb-action>\r\n                    <nb-action icon=\"download-outline\" status=\"info\" title=\"Descargar Reporte\" href=\"{{environment.baseUrl.backend}}/report/{{pop?.id}}/{{user.id}}\" target=\"_blank\">\r\n\r\n                    </nb-action>\r\n\r\n                    <nb-action *ngIf=\"!pop?.active;else pause\" title=\"Activar\" [swal]=\"activeSwal\">\r\n                        <nb-icon icon=\"play-circle-outline\" status=\"success\"></nb-icon>\r\n\r\n                        <swal #activeSwal title=\"Seguro que desea Activar la campaña: {{ pop?.name }}?\" text=\"Esto cambiará la campaña activa actual\" icon=\"question\" [showCancelButton]=\"true\" [focusCancel]=\"true\" (confirm)=\"activatePopulation(pop, i)\">\r\n                        </swal>\r\n                    </nb-action>\r\n                    <ng-template #pause>\r\n\r\n                        <nb-action title=\"Desactivar\">\r\n                            <nb-icon icon=\"stop-circle-outline\" status=\"danger\"></nb-icon>\r\n                        </nb-action>\r\n                    </ng-template>\r\n\r\n                </nb-actions>\r\n\r\n\r\n\r\n\r\n            </nb-list-item>\r\n        </nb-list>\r\n\r\n    </nb-card-body>\r\n    <nb-card-footer>\r\n\r\n    </nb-card-footer>\r\n</nb-card>\r\n","import { Component, EventEmitter, OnInit, Output } from '@angular/core';\r\nimport { Population } from '@core/data/remote/schemas/population';\r\nimport { User } from '@core/data/remote/schemas/users';\r\nimport { AuthService } from '@core/data/remote/services/auth.service';\r\nimport { SurveyService } from '@core/data/remote/services/survey.service';\r\nimport { NbDialogService } from '@nebular/theme';\r\nimport { environment } from 'environments/environment';\r\n\r\nimport { PopulationAddComponent } from '../population-add/population-add.component';\r\n\r\n\r\n@Component({\r\n  selector: 'ngx-populations-list',\r\n  templateUrl: './populations-list.component.html',\r\n  styleUrls: ['./populations-list.component.scss']\r\n})\r\nexport class PopulationsListComponent implements OnInit {\r\n  public user:  User = null;\r\n  populations: Population[];\r\n  active_population: Population = null;\r\n  environment = environment;\r\n  @Output() onActivate: EventEmitter<Population[]> = new EventEmitter<Population[]>();\r\n  constructor(\r\n    private _dialogService: NbDialogService,\r\n    private _surveyService: SurveyService,\r\n    _authService: AuthService,\r\n\r\n  ) {\r\n    _authService.getCurrentUser().subscribe(\r\n      (user) => this.user = user,\r\n    );\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.getPopulations();\r\n  }\r\n  addPopulation(user?: User) {\r\n    if (user) {\r\n      this._dialogService.open(PopulationAddComponent, {context:  user.id.toString()});\r\n    } else {\r\n      this._dialogService.open(PopulationAddComponent)\r\n      .onClose.subscribe(population => {\r\n        if(population){\r\n\r\n          this.populations = [population].concat( this.populations) }\r\n        }\r\n\r\n        )\r\n    }\r\n      // .onClose.subscribe(name => name && this.names.push(name));\r\n  }\r\n\r\n  getPopulations(){\r\n    this._surveyService.getPopulations().subscribe({\r\n      next: (populations: Array<Population>) => {\r\n        this.populations = populations;\r\n        this.populations.map((pop:Population)=>{\r\n            if(pop.active){\r\n              this.active_population = pop;\r\n            }\r\n        })\r\n      }\r\n    });\r\n  }\r\n\r\n  deletePopulation(pop: Population, i: number){\r\n    this._surveyService.delPopulations(pop).subscribe({\r\n      next: (populations: Array<Population>) => {\r\n        if(populations){\r\n          this.populations.splice(i,1);\r\n        }\r\n\r\n      }\r\n    });\r\n\r\n  }\r\n\r\n  activatePopulation(pop, i){\r\n    this._surveyService.activePopulations(pop).subscribe({\r\n      next: (populations: Array<Population>) => {\r\n        if(populations){\r\n          this.populations = populations;\r\n          this.onActivate.emit(populations);\r\n\r\n          //emit change\r\n        }\r\n\r\n      }\r\n    });\r\n\r\n  }\r\n}\r\n","import { ThrowStmt } from '@angular/compiler';\r\nimport { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\r\nimport { Surveyed } from '@core/data/remote/schemas/surveyed';\r\nimport { SurveyService } from '@core/data/remote/services/survey.service';\r\n\r\n@Component({\r\n  selector: 'ngx-surveyed-add',\r\n  templateUrl: './surveyed-add.component.html',\r\n  styleUrls: ['./surveyed-add.component.scss']\r\n})\r\nexport class SurveyedAddComponent implements OnInit {\r\n  @Input() population_id: string;\r\n  @Output() added: EventEmitter<any> = new EventEmitter();\r\n  surveyed: Surveyed = {name:\"\", identification:\"\", last_name: \"\", population_id:\"\"};\r\n  constructor(\r\n   private _surveyService: SurveyService\r\n  ) {\r\n\r\n  }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n  onSubmit(){\r\n    this.surveyed.population_id = this.population_id;\r\n    this._surveyService.addSurveyed( this.surveyed).subscribe((surveyed) => {\r\n      this.added.emit(surveyed);\r\n      this.surveyed =  new Surveyed;\r\n    });\r\n\r\n  }\r\n\r\n}\r\n","<div class=\"row\">\r\n    <div class=\"col-md-12\">\r\n        <nb-card class=\"inline-form-card\">\r\n            <nb-card-header>Agregar Encuestado</nb-card-header>\r\n            <nb-card-body>\r\n                <form class=\"form-inline\">\r\n                    <input name=\"name\" [(ngModel)]=\"surveyed.name\" type=\"text\" nbInput fullWidth placeholder=\"Nombre\">\r\n                    <input name=\"identification\" [(ngModel)]=\"surveyed.identification\" type=\"text\" nbInput fullWidth placeholder=\"ID\">\r\n                    <button (click)=\"onSubmit()\" nbButton status=\"primary\">Agregar</button>\r\n                </form>\r\n            </nb-card-body>\r\n        </nb-card>\r\n    </div>\r\n</div>\r\n","<nb-card size=\"large\">\r\n\r\n    <nb-card-body>\r\n\r\n        <h2>{{title}} </h2>\r\n        <p>\r\n            El siguiente es un listado de encuestas realizadas a traves de su enlace personal.\r\n        </p>\r\n        <div class=\"row mb-2\">\r\n            <div class=\"col-md-6\">\r\n                <label for=\"name\"> Nombre</label>\r\n                <nb-form-field>\r\n                    <nb-icon nbPrefix icon=\"person-outline\" pack=\"eva\"></nb-icon>\r\n                    <input [(ngModel)]=\"filterName\" fieldSize=\"small\" placeholder=\"Buscar por Nombre\" name=\"name\" type=\"text\" nbInput>\r\n                </nb-form-field>\r\n            </div>\r\n            <div class=\"col-md-6\">\r\n                <label for=\"id\"> Id</label>\r\n                <nb-form-field>\r\n                    <nb-icon nbPrefix icon=\"hash-outline\" pack=\"eva\"></nb-icon>\r\n                    <input [(ngModel)]=\"filterId\" fieldSize=\"small\" placeholder=\"Buscar por Id\" name=\"id\" type=\"text\" nbInput>\r\n                </nb-form-field>\r\n            </div>\r\n        </div>\r\n\r\n        <nb-list class=\"row mt-2\">\r\n            <nb-list-item class=\"d-flex justify-content-between align-items-stretch\" *ngFor=\"let survey of (surveys | filter:filterName | filter:filterId) ; let i = index\">\r\n\r\n                <nb-user size=\"medium\" [name]=\"survey?.surveyed?.name\" [title]=\"survey?.surveyed?.identification\">\r\n                </nb-user>\r\n\r\n\r\n                <nb-actions fullWidth size=\"small\" class=\"text-center\">\r\n                    <nb-action title=\"Inicio\" class=\"d-flex flex-column justify-content-center\">\r\n                        <p class=\"label  p-0 m-0\"><b>Desde:</b> </p>\r\n                        <p>{{survey?.created_at | date:'medium'}}</p>\r\n                    </nb-action>\r\n\r\n\r\n                    <nb-action title=\"Borrar Campaña\" class=\"d-flex flex-column justify-content-center\">\r\n\r\n                        <p class=\"label p-0 m-0\"><b>Hasta:</b></p>\r\n                        <p>{{survey?.updated_at | date:'medium'}}</p>\r\n                    </nb-action>\r\n                    <nb-action tile=\"ver encuesta\" class=\"text-center\">\r\n                        <a href=\"#/encuesta/1/{{user.id}}/{{survey.uuid}}\" target=\"_blank\">\r\n                            <nb-icon icon=\"external-link-outline\" status=\"info\">\r\n\r\n                            </nb-icon>\r\n                        </a>\r\n                    </nb-action>\r\n                    <nb-action [swal]=\"deleteSwal\" tile=\"borrar encuesta\" class=\"text-center\">\r\n\r\n                        <nb-icon icon=\"trash-outline\" status=\"info\">\r\n\r\n                        </nb-icon>\r\n\r\n                        <swal #deleteSwal title=\"Seguro que desea eliminar la encuesta de {{ survey.surveyed.name }}?\" text=\"Esto no se puede deshacer\" icon=\"question\" [showCancelButton]=\"true\" [focusCancel]=\"true\" (confirm)=\"delete_survey(survey, i)\">\r\n                        </swal>\r\n                    </nb-action>\r\n\r\n                </nb-actions>\r\n\r\n\r\n\r\n\r\n            </nb-list-item>\r\n        </nb-list>\r\n\r\n    </nb-card-body>\r\n    <nb-card-footer>\r\n\r\n    </nb-card-footer>\r\n</nb-card>\r\n","import { Component, Input, OnInit } from '@angular/core';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { Survey } from '@core/data/remote/schemas/survey';\r\nimport { User } from '@core/data/remote/schemas/users';\r\nimport { SurveyService } from '@core/data/remote/services/survey.service';\r\nimport { NbAccessChecker } from '@nebular/security';\r\n\r\n@Component({\r\n  selector: 'ngx-surveys-table',\r\n  templateUrl: './surveys-table.component.html',\r\n  styleUrls: ['./surveys-table.component.scss']\r\n})\r\nexport class SurveysTableComponent implements OnInit {\r\n  loading: boolean;\r\n  @Input() user: User;\r\n  @Input() surveys:  Array<Survey>;\r\n  @Input() title: string;\r\n\r\n  //surveys: Array<Survey>;\r\n  filterargs = {name: 'luis'};\r\n  filterName = \"\";\r\n  filterId = \"\";\r\n  constructor(\r\n    private _Activatedroute:ActivatedRoute,\r\n    private _surveyService: SurveyService,\r\n    public _accessChecker: NbAccessChecker,\r\n    private _router: Router ,\r\n  ) { }\r\n\r\n  ngOnInit(): void {\r\n    //this.getSurveys();\r\n  }\r\n\r\n  view_survey(survey: Survey){\r\n    this._router.navigate([\"encuesta\",  1,this.user.id,survey.uuid]);\r\n\r\n  }\r\n\r\n  delete_survey(survey,i ){\r\n    this._surveyService.deleteSurvey(survey).subscribe({\r\n      next: (surveyed: Survey) => {\r\n        this.surveys.splice(i,1);\r\n        this._surveyService.showToast(\"rigth\", \"success\", \"Borrado Correctamente\")\r\n      }\r\n    });\r\n  }\r\n}\r\n"]}