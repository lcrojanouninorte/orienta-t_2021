{"version":3,"mappings":"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","names":["_angular_core__WEBPACK_IMPORTED_MODULE_3__","HowToComponent","_fb","_router","_route","_surveyService","_authService","id","text","code","options","question_id","value","getCurrentUser","subscribe","user","form","group","valid","formData","toFormData","loading","createOrGetSurvey","next","event","type","_angular_common_http__WEBPACK_IMPORTED_MODULE_4__","body","showToast","survey","navigate","uuid","error","message","selectors","decls","vars","consts","template","InstructivoComponent","_lottieSrv","location","getOptions","back","animationItem","speed","animationCreated","ctx","routes","path","component","_instrumento_component__WEBPACK_IMPORTED_MODULE_2__","children","_instructivo_instructivo_component__WEBPACK_IMPORTED_MODULE_1__","pathMatch","_how_to_how_to_component__WEBPACK_IMPORTED_MODULE_0__","_test_test_component__WEBPACK_IMPORTED_MODULE_3__","InstrumentoRoutingModule","_angular_router__WEBPACK_IMPORTED_MODULE_5__","imports","exports","InstrumentoComponent","ngZone","router","accessChecker","menuService","route","ls","_modules_pages_menu__WEBPACK_IMPORTED_MODULE_0__","_angular_core__WEBPACK_IMPORTED_MODULE_5__","InstrumentoModule","_angular_common__WEBPACK_IMPORTED_MODULE_11__","_instrumento_routing_module__WEBPACK_IMPORTED_MODULE_0__","_nebular_theme__WEBPACK_IMPORTED_MODULE_12__","app_theme_theme_module__WEBPACK_IMPORTED_MODULE_5__","ngx_lottie__WEBPACK_IMPORTED_MODULE_3__","player","app_app_module__WEBPACK_IMPORTED_MODULE_4__","_nebular_date_fns__WEBPACK_IMPORTED_MODULE_13__","format","parseOptions","useAdditionalWeekYearTokens","useAdditionalDayOfYearTokens","formatOptions","_angular_forms__WEBPACK_IMPORTED_MODULE_14__","declarations","_how_to_how_to_component__WEBPACK_IMPORTED_MODULE_6__","_scale_card_scale_card_component__WEBPACK_IMPORTED_MODULE_7__","_scale_scale_component__WEBPACK_IMPORTED_MODULE_8__","_test_test_component__WEBPACK_IMPORTED_MODULE_9__","_angular_core__WEBPACK_IMPORTED_MODULE_1__","ScaleCardComponent","option","$event","_a","controls","question","label","subcode","setValue","answer","checkIfQuestionIsdone","done","answers","_b","checked","isDone","emit","onChange","map","inputs","outputs","_angular_core__WEBPACK_IMPORTED_MODULE_0__","_r3","ScaleComponent","state","selected_value","_angular_core__WEBPACK_IMPORTED_MODULE_2__","ctx_r12","ctx_r13","ctx_r14","ctx_r36","option_r30","ctx_r34","_r32","ctx_r15","ctx_r49","ctx_r52","ctx_r16","ctx_r62","option_r56","ctx_r60","ctx_r55","_r58","ctx_r17","ctx_r18","ctx_r19","ctx_r20","ctx_r0","_r5","TestComponent","_Activatedroute","_accessChecker","_ly","dateService","Array","events","forEach","_angular_router__WEBPACK_IMPORTED_MODULE_3__","updateSession","snapshot","paramMap","get","section_id","getSession","getSurvey","getSingleSection","section","total_questions","total_questions_answered","questions","i","addControl","_angular_forms__WEBPACK_IMPORTED_MODULE_4__","validators","date","Date","updateProgress","scrollToTop","time","start","created_at","end","today","append","addOrUpdateSurvey","_angular_common_http__WEBPACK_IMPORTED_MODULE_7__","survey_id","parseInt","validateAllFormFields","formGroup","Object","keys","field","control","markAsTouched","onlySelf","progress","Math","ceil","index","item","trackId","scrollTo"],"sources":["webpack:///src/app/pages/instrumento/how-to/how-to.component.html","webpack:///src/app/pages/instrumento/how-to/how-to.component.ts","webpack:///src/app/pages/instrumento/instructivo/instructivo.component.ts","webpack:///src/app/pages/instrumento/instructivo/instructivo.component.html","webpack:///src/app/pages/instrumento/instrumento-routing.module.ts","webpack:///src/app/pages/instrumento/instrumento.component.ts","webpack:///src/app/pages/instrumento/instrumento.component.html","webpack:///src/app/pages/instrumento/instrumento.module.ts","webpack:///src/app/pages/instrumento/scale-card/scale-card.component.html","webpack:///src/app/pages/instrumento/scale-card/scale-card.component.ts","webpack:///src/app/pages/instrumento/scale/scale.component.html","webpack:///src/app/pages/instrumento/scale/scale.component.ts","webpack:///src/app/pages/instrumento/test/test.component.html","webpack:///src/app/pages/instrumento/test/test.component.ts"],"sourcesContent":["<div class=\"col-md-10 offset-md-1  h-100\">\n\n    <div class=\"section \">\n        <div class=\"row \">\n\n            <!-- Instrucciones generales -->\n            <div class=\"col-md-9\">\n                <h2 class=\"h4   text-blue-orientate\">Cómo responder</h2>\n                <p class=\"h6 mt-2 font-weight-light \">Lee cada pregunta con atención y escoge la respuesta. La respuesta de cada pregunta implica marcar todas las opciones presentadas, en orden de preferencia según la escala</p>\n\n                <p class=\"h6 mt-2\">Me encanta - Me gusta - No estoy seguro - No me gusta</p>\n\n                <p class=\"text-blue-orientate mt-3 text-break\">Recuerda que no existen respuesta buenas o malas, todas las respuestas son válidas. Contesta con la mayor honestidad posible.</p>\n\n            </div>\n        </div>\n    </div>\n\n    <div class=\"section mb-4\">\n        <!-- Componente de ejemlo -->\n        <img class=\"scale-card\" src=\"assets/Orienta-t/Escala de respuesta/PNG/Oriéntate_Barra.png\">\n        <p class=\"text-blue-orientate mt-3 p\">A continuación podrás responder una pregunta de prueba.</p>\n    </div>\n    <div class=\"section my-5 \">\n        <!-- Componente de ejemlo interactivo -->\n\n        <h2 class=\"h4    text-blue-orientate \">Responde el siguiente ejemplo:</h2>\n\n        <ngx-scale-card class=\"mt-4\" [question]=\"example_question\"></ngx-scale-card>\n\n    </div>\n    <div class=\" section mt-5 mb-5\">\n        <!-- Iniciar test -->\n        <div *ngIf=\"!this.user?.survey_uuid\" class=\"row cta\">\n            <button (click)=\"start()\" class=\"mx-auto \" nbButton shape=\"round\" status=\"primary\">INICIAR TEST</button>\n        </div>\n        <div *ngIf=\"this.user?.survey_uuid\" class=\"row cta\">\n            <button routerLink=\"/encuesta/1/{{this.user?.survey_uuid}}\" class=\"mx-auto \" nbButton shape=\"round\" status=\"primary\">RESUMIR TEST</button>\n        </div>\n\n    </div>\n    <div class=\"section m-0\">\n        <div class=\"d-flex justify-content-end align-items-end\">\n\n            <img class=\"footer-logo \" width=\"80%\" src=\"assets/Orienta-t/Logo/SVG/Assets Oriéntate_Azul.svg\" alt=\"Logo\">\n        </div>\n\n    </div>\n</div>\n","import { HttpEventType } from '@angular/common/http';\nimport { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup } from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { User } from '@core/data/remote/schemas/users';\nimport { AuthService } from '@core/data/remote/services/auth.service';\nimport { SurveyService } from '@core/data/remote/services/survey.service';\nimport { NbAuthService } from '@nebular/auth';\n\n@Component({\n  selector: 'ngx-how-to',\n  templateUrl: './how-to.component.html',\n  styleUrls: ['./how-to.component.scss']\n})\nexport class HowToComponent implements OnInit {\n  public form: FormGroup;\n  public pollster_id: any;\n  public population_id: string;\n  loading: boolean;\n  error: boolean;\n  message: string;\n  survey: any;\n  user: User;\n  progress: 50;\n  constructor(\n    private _fb: FormBuilder,\n    private _router: Router ,\n    private _route:ActivatedRoute,\n    private _surveyService: SurveyService,\n    private _authService: AuthService,\n    ) {\n\n      _authService.getCurrentUser().subscribe(\n        (user) => {\n          this.user = user;\n        }\n      );\n    }\n      example_question = {\n        id:1,\n        text: `Me gustaría ir a una charla sobre:`,\n        code: \"1\",\n        options:[\n          { question_id:1,\n            text: `Cómo influye la sociedad a grupos minoritarios, como por ejemplo, personas en\n                  situación de pobreza, personas con discapacidad, entre otros.`,\n            value:\"\",\n            code: 1,\n          },\n          {\n            question_id:1,\n            text: `Influencia de la música rock en la vida moderna.`,\n            value:\"\",\n            code: 2,\n          },\n          {\n            question_id:1,\n            text: `Cómo dirigir y organizar el personal de una empresa.`,\n            value:\"\",\n            code: 3,\n          },{\n            question_id:1,\n            text: `Formas de tratamiento o apoyo para personas que tienen dificultades con abuso de sustancias, como por ejemplo, drogas o alcohol.`,\n            value:\"\",\n            code: 4,\n          }\n        ]\n\n      };\n\n  ngOnInit(): void {\n    this.form = this._fb.group({});\n\n   }\n\n  start(){\n    // Load Survey By Creating a survey in the server and returning an uuid for this user.\n    if(this.form.valid){\n      //submit session\n      const formData = this._surveyService.toFormData(this.form.value);\n      this.loading = true;\n      this._surveyService.createOrGetSurvey(formData)\n      .subscribe({\n        next: (event => {\n            if ( event.type === HttpEventType.Response) {\n              if(event.body.type == 4 || event.body.type  == 3){\n                this._surveyService.showToast('top rigth', 'success', 'Bienvenido a la Encuesta');\n                this.survey = event.body.survey;\n                this._router.navigate([\"encuesta/\", this.survey.uuid]);\n\n              }else{\n                //0: no esta en base de datos\n                //1: nombre no coincide con base de datos\n                //2: encuesta por terminar\n                //3: encuesta terminada.\n                //4: nueva encuesta\n                this.error = true;\n                if(event.body.type == 0){\n                  this.message = \"Actualmente usted no se encuentra registrado en la base de datos.\"              }\n                if(event.body.type == 1){\n                  this.message = \"Uno de los datos proporcionados no es correcto, por favor intente nuevamente.\"\n\n                }\n                if(event.body.type == 2){\n                  this.message = \"Usted ya realizó esta encuesta, gracias por participar.\"\n                }\n              }\n              this.loading = false;\n\n\n\n            }\n\n\n\n        }),\n        error: (error => {\n          this._surveyService.showToast('top rigth', 'danger', error);\n          this.loading = false;\n          this.error = true;\n          this.message =error.message;\n        }),\n      });\n\n    //  this.stepper.next();\n\n    }else{\n      // this.validateAllFormFields(form); //{7}\n      //this.stepper.next();\n    }\n\n\n\n\n  }\n\n  continue(){\n    // load Survey based on user uuid if exist.\n  }\n\n}\n","import { Component, OnInit } from '@angular/core';\nimport { User } from '@core/data/remote/schemas/users';\nimport { AuthService } from '@core/data/remote/services/auth.service';\nimport { LottieService } from '@core/data/vendors/services/lottie.service';\nimport { MENU_ITEMS } from '@modules/pages-menu';\nimport { AnimationItem } from 'lottie-web';\nimport { AnimationOptions } from 'ngx-lottie';\nimport { Location } from '@angular/common';\n\n@Component({\n  selector: 'ngx-instructivo',\n  templateUrl: './instructivo.component.html',\n  styleUrls: ['./instructivo.component.scss']\n})\nexport class InstructivoComponent implements OnInit {\n  user: User;\n  constructor(    public _lottieSrv: LottieService,\n    private _authService: AuthService,\n    private location: Location,\n\n    ) {\n      this._authService.getCurrentUser()\n      .subscribe((user: User) => {\n        if (user) {\n          this.user = user;\n        }\n      });\n\n    }\n\n  ngOnInit(): void {\n  }\n  back(){\n    this.location.back();\n\n  }\n/**\n   *\n   * Lottie\n   */\n\n private animationItem: AnimationItem;\n public options: AnimationOptions  =  this._lottieSrv.getOptions('logo-orienta-t',{'loop':false } );\n public options2: AnimationOptions  =  this._lottieSrv.getOptions('start-orienta-t',{'loop':true } );\n\n animationCreated(animationItem: AnimationItem, speed): void {\n   this.animationItem = animationItem;\n   this._lottieSrv.animationCreated(animationItem,{\n     'speed':speed\n   });\n }\n}\n","<div class=\"col-md-10 offset-md-1  h-100\">\n    <div class=\"row  h-100\">\n        <div class=\"illustration-container  mx-auto col-12 order-1 order-md-2 col-md-7 order-1 order-md-2 \">\n            <div class=\" illustration  text-right   \">\n\n                <ng-lottie class=\"mx-auto\" [options]=\"options2\" (animationCreated)=\"animationCreated($event,0.3)\">\n                </ng-lottie>\n\n\n            </div>\n        </div>\n        <div class=\"info-container col-12 order-2 order-md-1 col-md-5  order-2 order-md-1  \">\n\n            <div class=\"row logo mt-md-5 \">\n                <h1 style=\"display: none;\">Orienta-t</h1>\n                <div class=\"logo-container\">\n                    <img width=\"100%\" src=\"assets/Orienta-t/Logo/SVG/Assets Oriéntate_Azul.svg\" alt=\"Logo\">\n\n                </div>\n            </div>\n            <div class=\"row slogan mt-4\">\n                <div class=\"col-sm-12\">\n\n                    <h2>Hola! {{user?.name}}</h2>\n                    <h3 class=\" mt-3\">Bienvenido al test de orientación académica Orienta-T</h3>\n                    <p class=\" mt-3\">Este test te ayudará a saber cuáles son tus preferencias y cómo se relacionan con ocupaciones en el mundo del trabajo.</p>\n                    <p class=\"instructions text-info\">\n                        Haz click en el botón continuar para ver las instrucciones y saber cómo responder el test.\n                    </p>\n                </div>\n            </div>\n            <div class=\"row cta mt-5 \">\n                <div class=\"col-sm-12 col-md-6 mb-3 text-left\">\n                    <button fullWidth (click)=\"back()\" nbButton shape=\"round\" status=\"primary\">\n                    <nb-icon icon=\"arrow-back-outline\"></nb-icon> REGRESAR </button>\n                </div>\n                <div class=\"col-sm-12 col-md-6  mb-3\">\n                    <button fullWidth routerLink=\"/encuesta/ejemplo\" nbButton shape=\"round\" outline status=\"primary\">\n                  CONTINUAR  <nb-icon icon=\"arrow-forward-outline\"></nb-icon> </button>\n                </div>\n\n\n            </div>\n\n\n\n        </div>\n\n    </div>\n\n\n\n\n</div>\n","import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { HowToComponent } from './how-to/how-to.component';\nimport { InstructivoComponent } from './instructivo/instructivo.component';\nimport { InstrumentoComponent } from './instrumento.component';\nimport { TestComponent } from './test/test.component';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: InstrumentoComponent,\n    children: [\n      {\n        path: 'instrucciones',\n        component: InstructivoComponent,\n        pathMatch: 'full'\n      },\n      {\n        path: 'ejemplo',\n        component: HowToComponent,\n        pathMatch: 'full'\n      },\n      {\n        path: ':section_id/:uuid',\n        component: TestComponent,\n      },\n    ]\n  },\n\n\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class InstrumentoRoutingModule { }\n","import { Component, NgZone, OnInit } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { LottieService } from '@core/data/vendors/services/lottie.service';\nimport { LayoutService } from '@core/utils';\nimport { MenuService } from '@core/utils/menu.service';\nimport { MENU_ITEMS } from '@modules/pages-menu';\nimport { NbAccessChecker } from '@nebular/security';\n\nimport { Location } from '@angular/common';\n\n@Component({\n  selector: 'ngx-instrumento',\n  templateUrl: './instrumento.component.html',\n  styleUrls: ['./instrumento.component.scss']\n})\nexport class InstrumentoComponent implements OnInit {\n  menu = MENU_ITEMS;\n\n  constructor( location: Location,\n    public _lottieSrv: LottieService,\n    private ngZone: NgZone,\n\n    public  router: Router,\n    private accessChecker: NbAccessChecker,\n    private menuService: MenuService,\n    private route: ActivatedRoute,\n    private ls: LayoutService) {\n\n\n    }\n\n  ngOnInit(): void {\n  }\n\n}\n","<nb-layout windowMode>\n    <nb-layout-header fixed>\n        <div class=\"container\">\n            <ngx-header without_sidebar_btn=\"true\" color=\"blue\"></ngx-header>\n        </div>\n    </nb-layout-header>\n\n\n    <!-- <nb-sidebar state=\"collapsed\" class=\"menu-sidebar \" tag=\"menu-sidebar\" responsive start>\n\n        <ng-content select=\"nb-menu\"></ng-content>\n\n    </nb-sidebar>-->\n\n    <nb-layout-column>\n\n\n        <router-outlet></router-outlet>\n\n\n\n    </nb-layout-column>\n    <!--\n<nb-layout-footer fixed>\n<ngx-footer></ngx-footer>\n</nb-layout-footer>-->\n</nb-layout>\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { InstrumentoRoutingModule } from './instrumento-routing.module';\nimport { InstructivoComponent } from './instructivo/instructivo.component';\nimport { InstrumentoComponent } from './instrumento.component';\nimport { LottieModule } from 'ngx-lottie';\nimport { NbActionsModule, NbBadgeModule, NbButtonModule, NbCardModule, NbCheckboxModule, NbDatepickerModule, NbIconModule, NbInputModule, NbLayoutModule, NbMenuModule, NbProgressBarModule, NbRadioModule, NbSidebarModule, NbSpinnerModule, NbTooltipModule } from '@nebular/theme';\nimport { playerFactory } from 'app/app.module';\nimport { ThemeModule } from 'app/@theme/theme.module';\nimport { HowToComponent } from './how-to/how-to.component';\nimport { ScaleCardComponent } from './scale-card/scale-card.component';\nimport { ScaleComponent } from './scale/scale.component';\nimport { TestComponent } from './test/test.component';\nimport { NbDateFnsDateModule } from '@nebular/date-fns';\nimport { ReactiveFormsModule } from '@angular/forms';\n\n\n@NgModule({\n  declarations: [InstructivoComponent, InstrumentoComponent, HowToComponent, ScaleCardComponent, ScaleComponent, TestComponent],\n  imports: [\n    CommonModule,\n    InstrumentoRoutingModule,\n    NbMenuModule,\n    NbLayoutModule,\n    ThemeModule,\n    NbCardModule,\n    NbSidebarModule,\n    NbButtonModule,\n    NbIconModule,\n    NbActionsModule,\n    LottieModule.forRoot({ player: playerFactory }),\n    NbInputModule,\n    NbRadioModule,\n    NbCheckboxModule,\n    NbDatepickerModule,\n    NbIconModule,\n    ThemeModule,\n    NbButtonModule,\n    NbTooltipModule,\n    NbBadgeModule,\n    NbProgressBarModule,\n    NbDateFnsDateModule.forChild({\n      format: 'dd - MM - yyyy' ,\n      parseOptions: { useAdditionalWeekYearTokens: true, useAdditionalDayOfYearTokens: true },\n      formatOptions: { useAdditionalWeekYearTokens: true, useAdditionalDayOfYearTokens: true },\n\n    }),\n    ReactiveFormsModule,\n    NbSpinnerModule,\n   ]\n})\nexport class InstrumentoModule {\n\n\n}\n","<div class=\"mt-5\">\n\n\n    <!--Pregunta General-->\n    <div class=\"d-flex flex-column justify-content-between\">\n        <div class=\"question row align-items-center\">\n            <div class=\"question-text   col-md-8 p-0 align-items-center\">\n                <p class=\"ml-3\"> <span class=\"num\"> {{question.code}} </span> {{question.text}}</p>\n            </div>\n            <div *ngIf=\"question.id==1\" class=\" instruction mx-auto col-md-4 align-items-center\">\n                <p class=\"text-blue-orientate caption text-center\">Recuerda elegir las opciones en orden de preferencia</p>\n                <img class=\"scale-card   mx-auto\" src=\"assets/Orienta-t/Escala de respuesta/PNG/Oriéntate_Barra.png\">\n            </div>\n        </div>\n    </div>\n\n    <!--Sub-preguntas-->\n    <div class=\"d-flex flex-column justify-content-between mt-3\">\n        <div *ngFor=\"let option of question.options\" class=\"sub-question row align-items-center\">\n            <div class=\"q-desc col-md-8 p-0 align-items-center\">\n                <div class=\"col-md-10 m-0 align-items-center\">\n\n                    <p class=\"sub-question-text\">{{option.text}}</p>\n                    <!--<p>Seleccion: {{option?.value}}</p>-->\n                </div>\n            </div>\n            <div class=\"q-scale col-md-4 align-items-center\">\n                <ngx-scale [value]=\"form?.controls[question.label + '_' + option.subcode].value\" (onChange)=\"setOptionValue(option,$event)\"></ngx-scale>\n            </div>\n        </div>\n    </div>\n\n</div>\n","import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport {  FormGroup } from '@angular/forms';\nimport { Question } from '@core/data/remote/schemas/question';\n\n@Component({\n  selector: 'ngx-scale-card',\n  templateUrl: './scale-card.component.html',\n  styleUrls: ['./scale-card.component.scss']\n})\nexport class ScaleCardComponent implements OnInit {\n\n  @Input() question: Question;\n  @Input() form: FormGroup;\n  @Output() isDone = new EventEmitter<boolean>();\n  @Output() onChange = new EventEmitter<boolean>();\n\n  done: number = 0;\n  constructor() { }\n\n  ngOnInit(): void {\n\n  }\n\n  setOptionValue(option,$event){\n    //Update Parent formcontrol.\n    if(this.form?.controls){\n\n      this.form.controls[this.question.label + \"_\" + option.subcode].setValue($event) ;\n      this.question.answer[this.question.label+\"_\"+option.subcode] = $event;\n      //Eval if this questions have all options answered.\n      this.checkIfQuestionIsdone();\n      if(this.done == 4 && this.question.answers[0]?.checked != true){\n        this.question.checked = true;\n        this.question.answers[0].checked = true;\n        this.isDone.emit(true);\n      }\n      this.onChange.emit(true);\n    }\n\n  }\n\n  checkIfQuestionIsdone(){\n    this.done = 0;\n\n    this.question.options.map(option=>{\n      if(this.form.controls[this.question.label + \"_\" + option.subcode].value){\n        this.done++;\n      }\n    })\n  }\n\n}\n","<nb-actions fullWidth size=\"medium\">\n    <nb-action *ngFor=\"let option of options\">\n        <nb-icon class=\"click\" *ngIf=\"option.value != value; else active\" (click)=\"setValue(option.value)\" pack=\"orienta-t-icons\" [icon]=\"option.label\"></nb-icon>\n        <ng-template #active>\n            <nb-icon class=\"click\" pack=\"orienta-t-icons\" [icon]=\"option.label+ '-ol'\"></nb-icon>\n            <!--<p>Selected value: {{value}}</p>-->\n        </ng-template>\n    </nb-action>\n</nb-actions>\n","import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport { Answer } from '@core/data/remote/schemas/Answer';\n\n@Component({\n  selector: 'ngx-scale',\n  templateUrl: './scale.component.html',\n  styleUrls: ['./scale.component.scss']\n})\nexport class ScaleComponent implements OnInit {\n\n\n  @Output() onChange = new EventEmitter<string>();\n  @Input() value:string;\n\n  options = [\n    { state:false, value: '1', label: 'love' },\n    { state:false, value: '2', label: 'like' },\n    { state:false, value: '3', label: 'not-sure' },\n    { state:false, value: '4', label: 'not-like' },\n  ];\n  constructor() { }\n\n  ngOnInit(): void {\n\n  }\n\n  setValue(selected_value){\n    //Update others options\n\n    this.value = selected_value;\n    this.onChange.emit(this.value);\n  }\n\n\n\n}\n","<div class=\"col-md-8 offset-md-2\">\n    <nb-card class=\"sticky-top progress m-0 container-fluid\">\n        <nb-card-body>\n            <nb-progress-bar [value]=\"progress\" status=\"primary\" [displayValue]=\"true\" status=\"primary\"> </nb-progress-bar>\n        </nb-card-body>\n    </nb-card>\n    <div status=\"primary\" [nbSpinner]=\"loading\" nbSpinnerStatus=\"info\" nbSpinnerSize=\"large\" nbSpinnerMessage=\"Actualizando\">\n\n        <div>\n            <div class=\"p-3\">\n                <div *ngIf=\"start || (section_id != '1' && !start)\" #stepper>\n\n                    <div label=\"Sección {{ section?.code }}\">\n                        <form [formGroup]=\"form\" async>\n                            <div *ngIf=\"section?.visible\">\n                                <h4 class=\"text-blue-orientate\">\n                                    <span>{{ section?.code }}.</span> {{ section?.text }}\n                                </h4>\n                                <p class=\"lorem\">\n                                    {{ section?.desc }}\n                                </p>\n                            </div>\n                            <br />\n                            <ng-container *ngFor=\"\n                      let question of section?.questions;\n                      let j = index;\n                      trackBy: trackByFn\n                    \">\n\n\n                                <div *ngIf=\"question?.show\">\n                                    <div *ngIf=\"question.pre_title\">\n                                        <br />\n                                        <h6 class=\"text-info\"><b>{{question.pre_title}}</b></h6>\n\n                                    </div>\n                                    <!-- <div class=\"question-text row\">\n\n                                          <span class=\"text-danger\" *ngIf=\"question.required\">*</span>\n                                          <div *ngIf=\"question.type !== 'INS'\">\n                                              <b><span> {{ question.label }} </span> {{ question.text }}</b>\n                                          </div>\n                                      </div>-->\n                                    <div>\n                                        <span *ngIf=\"question.type!=='INS'\" class=\"caption\"> {{ question.desc }} </span>\n                                    </div>\n                                    <div [ngSwitch]=\"question.type\">\n\n                                        <div class=\"pt-2\" *ngSwitchCase=\"'T'\">\n                                            <input [name]=\"question.label\" type=\"text\" nbInput shape=\"round\" fullWidth fieldSize=\"small\" status=\"danger\" [formControl]=\"form.controls[question.label]\" />\n                                        </div>\n                                        <div class=\"pt-2\" *ngSwitchCase=\"'TL'\">\n                                            <textarea [name]=\"question.label\" type=\"text\" nbInput shape=\"round\" fullWidth fieldSize=\"small\" status=\"danger\" [formControl]=\"form.controls[question.label]\"></textarea>\n                                        </div>\n                                        <div class=\"pt-2\" *ngSwitchCase=\"'N'\">\n                                            <input [name]=\"question.label\" type=\"number\" shape=\"round\" fullWidth fieldSize=\"small\" status=\"danger\" [formControl]=\"form.controls[question.label]\" />\n                                        </div>\n                                        <div class=\"pt-2\" *ngSwitchCase=\"'U'\">\n                                            <nb-radio-group status=\"danger\" [name]=\"question.label\" [formControl]=\"form.controls[question.label]\">\n                                                <nb-radio (click)=\"\n                                eval_conditions(\n                                  form,\n                                  question,\n                                  option.value,\n                                  section.questions\n                                )\n                              \" *ngFor=\"\n                                let option of question.options;\n                                let j = index;\n                                trackBy: trackByFn\n                              \" value=\"{{ option.value }}\">\n                                                    <ng-template #elseBlock>\n                                                        {{ option.text }}\n                                                    </ng-template>\n\n                                                    <input *ngIf=\"option.isOther; else elseBlock\" type=\"text\" fieldSize=\"small\" shape=\"round\" fullWidth status=\"danger\" nbInput (click)=\"\n                                  form.get(question.label).setValue(option.value)\n                                \" [placeholder]=\"option.text\" [formControl]=\"form.controls[question.label + '_OTRO']\" />\n                                                </nb-radio>\n                                            </nb-radio-group>\n                                            <div *ngIf=\"\n                              form.get(question.label + '_OTRO')?.invalid &&\n                              (form.get(question.label + '_OTRO')?.dirty ||\n                                form.get(question.label + '_OTRO')?.touched)\n                            \" class=\"alert text-danger label\">\n                                                <div *ngIf=\"\n                                form.get(question.label + '_OTRO').errors.required\n                              \">\n                                                    La Opción OTRO es Obligatoria para la pregunta\n                                                    <b>{{ question.label }}</b>.\n                                                </div>\n                                            </div>\n                                        </div>\n                                        <div class=\"pt-2\" *ngSwitchCase=\"'S'\">\n                                            <nb-radio-group status=\"danger\" [name]=\"question.label\" [formControl]=\"form.controls[question.label]\">\n                                                <nb-radio (click)=\"\n                                eval_conditions(\n                                  form,\n                                  question,\n                                  1,\n                                  section.questions\n                                )\n                              \" value=\"1\">\n                                                    Sí\n                                                </nb-radio>\n                                                <nb-radio (click)=\"\n                                eval_conditions(\n                                  form,\n                                  question,\n                                  2,\n                                  section.questions\n                                )\n                              \" value=\"2\">\n                                                    No\n                                                </nb-radio>\n                                            </nb-radio-group>\n                                        </div>\n                                        <div class=\"pt-2\" *ngSwitchCase=\"'M'\">\n                                            <nb-checkbox status=\"danger\" [name]=\"question.label + '_' + option.value\" class=\"m-2 row\" [formControl]=\"form.controls[question.label + '_' + option.subcode]\" *ngFor=\"\n                              let option of question.options;\n                              let j = index;\n                              trackBy: trackByFn\n                            \" value=\"option.value\">\n                                                <ng-template #elseBlock2>\n                                                    {{ option.text }}\n                                                </ng-template>\n                                                <input *ngIf=\"option.isOther; else elseBlock2\" type=\"text\" fieldSize=\"small\" shape=\"round\" fullWidth status=\"danger\" nbInput (click)=\"\n                                  form.get(question.label).setValue(option.value)\n                                \" [placeholder]=\"option.text\" [formControl]=\"form.controls[question.label + '_OTRO']\" />\n                                            </nb-checkbox>\n\n                                        </div>\n                                        <div class=\"pt-2\" *ngSwitchCase=\"'D'\">\n                                            <input nbInput status=\"danger\" placeholder=\"dd - MM - yyyy\" [nbDatepicker]=\"formcontrol\" [formControl]=\"form.controls[question.label]\" />\n                                            <nb-datepicker format=\"dd - MM - yyyy\" #formcontrol></nb-datepicker>\n                                        </div>\n                                        <div class=\"pt-2 d-flex flex-row justify-content-between align-items-center\" *ngSwitchCase=\"'E'\">\n                                            <div>\n                                                {{ question.start }}\n                                            </div>\n                                            <nb-radio-group class=\"d-flex flex-row justify-content-between\" [name]=\"question.label\" [formControl]=\"form.controls[question.label]\">\n                                                <nb-radio class=\"\" value=\"1\"> 1 </nb-radio>\n                                                <nb-radio class=\"\" value=\"2\"> 2 </nb-radio>\n                                                <nb-radio class=\"\" value=\"3\"> 3 </nb-radio>\n                                                <nb-radio class=\"\" value=\"4\"> 4 </nb-radio>\n                                                <nb-radio class=\"\" value=\"5\"> 5 </nb-radio>\n                                            </nb-radio-group>\n                                            <div>\n                                                {{ question.end }}\n                                            </div>\n                                        </div>\n                                        <div class=\"pt-2\" *ngSwitchCase=\"'SC'\">\n\n                                            <ngx-scale-card [question]=\"question\" [form]=\"form\" (onChange)=\"onSubmitUpdate(form)\" (isDone)=\"updateProgress(total_questions_answered+1)\"></ngx-scale-card>\n                                        </div>\n                                        <nb-card class=\"mt-3\" *ngSwitchCase=\"'INS'\" accent=\"primary\" status=\"info\">\n                                            <nb-card-header>\n                                                {{question.text}}\n                                            </nb-card-header>\n                                            <nb-card-body>\n                                                <div class=\"caption p-2\">\n                                                    <b> {{question.desc}}</b>\n                                                </div>\n                                            </nb-card-body>\n                                        </nb-card>\n                                    </div>\n                                    <div *ngIf=\"\n                                      form.get(question.label)?.invalid &&\n                                      (form.get(question.label)?.dirty ||\n                                        form.get(question.label)?.touched)\n                                    \" class=\"alert text-danger label\">\n                                        <span class=\"glyphicon glyphicon-remove form-control-feedback fix-error-icon\"></span>\n\n                                        <div class=\"error-msg\" *ngIf=\"form.get(question.label).errors.required\">\n                                            La Pregunta <b>{{ question.label }}</b> es obligatoria.\n                                        </div>\n                                        <div class=\"error-msg\" *ngIf=\"form.get(question.label).errors.email\">\n                                            Debe ingresar un Mail Valido\n                                        </div>\n                                    </div>\n                                    <br />\n                                </div>\n\n\n\n\n                            </ng-container>\n\n                            <div class=\"text-center\">\n                                <!-- <button nbButton (click)=\"scrollToTop()\" nbStepperPrevious>\n                                  Anterior\n                                </button>-->\n                                <button status=\"primary\" *ngIf=\"section_id != '2';else finish\" type=\"submit\" nbButton (click)=\"onSubmit(form, 1)\">\n                  Siguiente\n                </button>\n                                <ng-template #finish>\n                                    <div class=\"cta\">\n\n                                        <button size=\"large\" shape=\"round\" status=\"info\" type=\"submit\" nbButton (click)=\"onSubmit(form, 2)\">\n                    Finalizar\n                  </button>\n                                    </div>\n                                </ng-template>\n\n\n                            </div>\n                        </form>\n                    </div>\n                </div>\n            </div>\n\n        </div>\n\n    </div>\n</div>\n\n\n\n\n<!--<nb-card (click)=\"onSubmitUpdate(form)\" id=\"fixedbutton\">\n\n    <nb-badge text=\"?\" status=\"danger\" position=\"top left\"></nb-badge>\n    <button nbTooltip=\"Si no has terminado y deseas guardar tu progreso, haz clic aquí\" nbTooltipStatus=\"primary\" nbButton>\n\n      <nb-icon icon=\"save-outline\">\n      </nb-icon>\n  </button>\n</nb-card>\n-->\n","import { HttpEventType } from '@angular/common/http';\nimport { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormControl, FormGroup, Validators } from '@angular/forms';\nimport { ActivatedRoute, NavigationEnd, NavigationStart, Router } from '@angular/router';\nimport { Question } from '@core/data/remote/schemas/question';\nimport { Section } from '@core/data/remote/schemas/section';\nimport { Survey } from '@core/data/remote/schemas/survey';\nimport { User } from '@core/data/remote/schemas/users';\nimport { SurveyService } from '@core/data/remote/services/survey.service';\nimport { NbAccessChecker } from '@nebular/security';\nimport { NbDateService, NbLayoutScrollService } from '@nebular/theme';\nimport { formatDuration, intervalToDuration } from 'date-fns';\n\n@Component({\n  selector: 'ngx-test',\n  templateUrl: './test.component.html',\n  styleUrls: ['./test.component.scss']\n})\nexport class TestComponent implements OnInit {\n\n  public sections: Array<Section> = new Array<Section>();\n  public section: Section;\n  public forms: Array<FormGroup> = new Array<FormGroup>();\n  public form: FormGroup;\n\n  public loading: boolean = false;\n  public pollster_id: any;\n  start = true;\n  consent;\n  pollster: User;\n  survey_id: any;\n  uuid: string;\n  section_id: string;\n  survey: Survey;\n  population_id: any;\n  total_questions = 0;\n  total_questions_answered = 0;\n  progress = 0;\n\n  constructor(\n    private _Activatedroute: ActivatedRoute,\n    private _surveyService: SurveyService,\n    private _fb: FormBuilder,\n    public _accessChecker: NbAccessChecker,\n    private _ly: NbLayoutScrollService,\n    private _router: Router,\n    protected dateService: NbDateService<Date>\n\n  ) {\n    _router.events.forEach((event) => {\n      if (event instanceof NavigationStart) {\n      }\n      if (event instanceof NavigationEnd) {\n        this.updateSession();\n      }\n    });\n\n    //1. Load a survey by sessions and asnwers for given uuid\n    this.form = this._fb.group({});\n    this.uuid = this._Activatedroute.snapshot.paramMap.get(\"uuid\");\n    this.section_id = this._Activatedroute.snapshot.paramMap.get(\"section_id\");\n    this.getSession(this.uuid, this.section_id);\n    if (this.section_id == \"1\") {\n    //2. Get Answers of the uuid\n      this.getSurvey(this.uuid);\n    }\n  }\n  ngOnInit() {\n\n  }\n\n  getSession(uuid, section_id) {\n    this.loading = true;\n\n    this._surveyService.getSingleSection(uuid, section_id).subscribe({\n      next: (section: Section) => {\n        this.total_questions = 0;\n        this.total_questions_answered = 0;\n        this.section = section;\n        this.form = this._fb.group({});\n        this.section.questions.map((question: Question) => {\n          this.total_questions++;\n          if(question.answers[0]?.checked ){\n            this.total_questions_answered++;\n          }\n          //Set Validators:\n          switch (question.type) {\n            case \"SC\":\n            case \"M\":\n              question.options.map((option, i) => {\n\n                this.form.addControl(\n                  question.label + \"_\" + option.subcode,\n                  new FormControl(question.answer[question.label+\"_\"+option.subcode], [])\n                );\n\n\n              });\n\n              break;\n            case \"U\":\n              this.form.addControl(\n                question.label,\n                new FormControl(\n                  question.answer[question.label]+\"\",\n                  question.validators\n                )\n              );\n\n              question.options.map((option) => {\n                if (option.text === \"Otro\" || option.text === \"Otra\") {\n                  this.form.addControl(\n                    question.label + \"_OTRO\",\n                    new FormControl( question.answer[question.label + \"_OTRO\"]+ \" \", [])\n                  );\n                }\n\n              });\n\n              break;\n            case \"D\":\n              let date;\n              if(  question.answer[question.label] !== \"\"){\n                  date = new Date(question.answer[question.label]);\n\n               }else{\n                 date = new Date();\n\n              }\n              this.form.addControl(\n                question.label,\n                new FormControl(\n                  date,\n                  question.validators\n                )\n              );\n\n              break;\n            case \"INS\":\n              break;\n            default:\n              this.form.addControl(\n                question.label,\n                new FormControl(\n                  question.answer[question.label],\n                  question.validators\n                )\n              );\n\n              break;\n          }\n        });\n        this.loading = false;\n        this.updateProgress(this.total_questions_answered);\n\n        this.scrollToTop();\n\n        //Set Default values for date fields and sections\n        if(section_id==\"6\"){\n          let time = intervalToDuration({\n            start: new Date(this.section.survey.created_at),\n             end: this.dateService.today()\n          })\n          if( this.form.get(\"F_10\")){\n            if(this.form.get(\"F_10\").value == \"\"){\n              this.form.get(\"F_10\")?.setValue(\n                formatDuration( time )\n                 )\n            }else{\n\n            }\n          }\n\n\n        }\n\n       //Optional: eval CONDITIONS\n      // this._surveyService.eval_conditions(section, form: FormGroup, value, questions);\n      },\n    });\n  }\n\n  eval_conditions(){}\n  onSubmit(form: FormGroup, i) {\n    if (form.valid) {\n      //submit session\n      const formData = this._surveyService.toFormData(form.value);\n      formData.append(\"section_id\", this.section_id);\n      formData.append(\"uuid\", this.uuid);\n\n      this.loading = true;\n      this._surveyService.addOrUpdateSurvey(formData).subscribe({\n        next: (event) => {\n          if (event.type === HttpEventType.Response) {\n            this._surveyService.showToast(\n              \"top rigth\",\n              \"info\",\n              \"Información guardada correctamente\"\n            );\n            this.loading = false;\n            this.survey_id = event.body.id;\n\n            if (i == 2) {\n              this._router.navigate([\"/perfil/areas/\",this.uuid]);\n            }else{\n\n                this._router.navigate([\n                  \"encuesta\",\n                  parseInt(this.section_id) + 1,\n                  this.uuid,\n                ]);\n\n            }\n\n          }\n        },\n        error: (error) => {\n          this._surveyService.showToast(\"top rigth\", \"danger\", error);\n          this.loading = false;\n        },\n      });\n\n      //  this.stepper.next();\n    } else {\n      this.validateAllFormFields(form); //{7}\n      this._surveyService.showToast(\n        \"left\",\n        \"warning\",\n        \"Favor revisar preguntas sin responder.\"\n      );\n    }\n  }\n\n  onSubmitUpdate(form: FormGroup) {\n\n      //submit session\n      const formData = this._surveyService.toFormData(form.value);\n      formData.append(\"section_id\", this.section_id);\n      formData.append(\"uuid\", this.uuid);\n\n      this.loading = true;\n      this._surveyService.addOrUpdateSurvey(formData).subscribe({\n        next: (event) => {\n          if (event.type === HttpEventType.Response) {\n            this._surveyService.showToast(\n              \"top rigth\",\n              \"info\",\n              \"Pregunta guardada correctamente\"\n            );\n            this.loading = false;\n            this.survey_id = event.body.id;\n          }\n        },\n        error: (error) => {\n          this._surveyService.showToast(\"top rigth\", \"danger\", error);\n          this.loading = false;\n        },\n      });\n\n      //  this.stepper.next();\n\n  }\n\n  validateAllFormFields(formGroup: FormGroup) {\n    //{1}\n    Object.keys(formGroup.controls).forEach((field) => {\n      //{2}\n      const control = formGroup.get(field); //{3}\n      if (control instanceof FormControl) {\n        //{4}\n        control.markAsTouched({ onlySelf: true });\n      } else if (control instanceof FormGroup) {\n        //{5}\n        this.validateAllFormFields(control); //{6}\n      }\n    });\n  }\n\n  getSurvey(uuid) {\n    this.loading = true;\n    this._surveyService.getSurvey(uuid).subscribe({\n      next: (survey: Survey) => {\n        this.survey = survey;\n        this.loading = false;\n      },\n    });\n  }\n\n  updateSession() {\n    this.uuid = this._Activatedroute.snapshot.paramMap.get(\"uuid\");\n    this.section_id = this._Activatedroute.snapshot.paramMap.get(\"section_id\");\n    this.getSession(this.uuid, this.section_id);\n  }\n\n  updateProgress(total_questions_answered){\n\n    if(this.total_questions > 0){\n\n      this.total_questions_answered = total_questions_answered;\n      this.progress = Math.ceil((this.total_questions_answered / this.total_questions)*100);\n    }else{\n      this.progress =  0;\n    }\n  }\n\n  //HELPERS\n  trackByFn(index, item) {\n    return `${index}-${item?.trackId}`;\n  }\n\n  scrollToTop() {\n    this._ly.scrollTo(0, 0);\n\n    //\n  }\n}\n"]}