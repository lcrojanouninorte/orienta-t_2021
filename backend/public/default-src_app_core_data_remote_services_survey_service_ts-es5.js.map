{"version":3,"mappings":"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","names":["Answer","input","Object","assign","checked","Condition","question","map","_question__WEBPACK_IMPORTED_MODULE_0__","deserialize","Occupation","Onet","Option","Population","surveyeds","_surveyed__WEBPACK_IMPORTED_MODULE_0__","surveyed","Pps","onets","_onet__WEBPACK_IMPORTED_MODULE_0__","onet","PpsRank","pps","_pps__WEBPACK_IMPORTED_MODULE_0__","Question","validators","Array","required","push","_angular_forms__WEBPACK_IMPORTED_MODULE_3__","isEmail","show","conditions","options","_condition__WEBPACK_IMPORTED_MODULE_1__","condition","answers","_Answer__WEBPACK_IMPORTED_MODULE_0__","answer","_option__WEBPACK_IMPORTED_MODULE_2__","option","Section","questions","index","restriction_id","id","question_index","Survey","Surveyed","name","first_name","last_name","routes","sections","section","session","uuid","surveys","survey","survey_uuid","populations","population","population_activate","user_surveys","gateway","user","pps_uuid","occupations","pps_code","onet_title","occupation","title","SurveyService","_http","_nbService","get","pipe","log","handleError","_schemas_section__WEBPACK_IMPORTED_MODULE_5__","_schemas_question__WEBPACK_IMPORTED_MODULE_4__","q","put","post","postFormData","reportProgress","observe","_schemas_users__WEBPACK_IMPORTED_MODULE_8__","_schemas_survey__WEBPACK_IMPORTED_MODULE_6__","ppsRanking","_schemas_pps_rank__WEBPACK_IMPORTED_MODULE_3__","ppsRank","_schemas_occupation__WEBPACK_IMPORTED_MODULE_1__","ocupattions","_schemas_population__WEBPACK_IMPORTED_MODULE_2__","formData","pop_id","pop","url","_schemas_surveyed__WEBPACK_IMPORTED_MODULE_7__","form","value","length","result","forEach","values","split","includes","label","setValidators","updateValueAndValidity","_angular_forms__WEBPACK_IMPORTED_MODULE_13__","enable","_core_utils_commons__WEBPACK_IMPORTED_MODULE_0__","_angular_core__WEBPACK_IMPORTED_MODULE_14__","factory","providedIn"],"sources":["webpack:///src/app/@core/data/remote/schemas/Answer.ts","webpack:///src/app/@core/data/remote/schemas/condition.ts","webpack:///src/app/@core/data/remote/schemas/occupation.ts","webpack:///src/app/@core/data/remote/schemas/onet.ts","webpack:///src/app/@core/data/remote/schemas/option.ts","webpack:///src/app/@core/data/remote/schemas/population.ts","webpack:///src/app/@core/data/remote/schemas/pps.ts","webpack:///src/app/@core/data/remote/schemas/pps_rank.ts","webpack:///src/app/@core/data/remote/schemas/question.ts","webpack:///src/app/@core/data/remote/schemas/section.ts","webpack:///src/app/@core/data/remote/schemas/survey.ts","webpack:///src/app/@core/data/remote/schemas/surveyed.ts","webpack:///src/app/@core/data/remote/services/survey.service.ts"],"sourcesContent":["import { Deserializable } from './deserializable.model';\r\n\r\nexport class Answer implements Deserializable {\r\n  id?: number;\r\n  question_id?: string[];\r\n  survey_id: any;\r\n  value: any;\r\n  checked?: boolean;\r\n  deserialize?(input: any): this {\r\n    Object.assign(this, input);\r\n    this.checked = input.checked == 1 ? true: false;\r\n\r\n    return this;\r\n  }\r\n  constructor(){\r\n  }\r\n\r\n}\r\n","import { Deserializable } from './deserializable.model';\r\nimport { Question } from './question';\r\n\r\nexport class Condition implements Deserializable {\r\n  id?: number;\r\n  question_id: number;\r\n  restriction_id?: number;\r\n  value?: string;\r\n  label?: string;\r\n  question: Question;\r\n  question_index: number;\r\n\r\n\r\n  deserialize?(input: any): this {\r\n    Object.assign(this, input);\r\n    this.question ? input.question.map(question => new Question().deserialize(question)) : [];\r\n\r\n    return this;\r\n  }\r\n  constructor(){\r\n  }\r\n\r\n}\r\n\r\n","import { Deserializable } from './deserializable.model';\n\nexport class Occupation implements Deserializable {\n  id?: number;\n  title?: string;\n  desc?: string;\n  icon?: string;\n  knowledges?:any[];\n  skills?:any[];\n  outputs?:any[];\n  onet?:any[];\n\n  deserialize?(input: any): this {\n    Object.assign(this, input);\n    //this.onet ?  new Onet().deserialize(input.pps)   : [];\n\n    return this;\n  }\n  constructor(){\n  }\n\n}\n","import { Deserializable } from './deserializable.model';\n\nexport class Onet implements Deserializable {\n  cno_onet_id?: number;\n  title?: string;\n  desc?: string;\n  icon?: string;\n  onets?: Onet;\n  outputs?: any[];\n\n  deserialize?(input: any): this {\n    Object.assign(this, input);\n    //this.onet ?  new Onet().deserialize(input.pps)   : [];\n\n    return this;\n  }\n  constructor(){\n  }\n\n}\n","import { Deserializable } from './deserializable.model';\r\n\r\nexport class Option implements Deserializable {\r\n  id?: number;\r\n  question_id: number;\r\n  subcode?: string;\r\n  text: string;\r\n  value?: string;\r\n\r\n\r\n  deserialize?(input: any): this {\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n  constructor(){\r\n  }\r\n\r\n}\r\n\r\n","import { Deserializable } from './deserializable.model';\r\nimport { Surveyed } from './surveyed';\r\n\r\nexport class Population implements Deserializable {\r\n  id?: number;\r\n  name?: string[];\r\n  uuid: any;\r\n  active: boolean;\r\n  surveyeds: Surveyed[];\r\n  created_at?:any;\r\n  updated_at?:any;\r\n  surveys?:any;\r\n  file_path?: string;\r\n  deserialize?(input: any): this {\r\n    Object.assign(this, input);\r\n    this.surveyeds ? input.surveyeds.map(surveyed => new Surveyed().deserialize(surveyed)) : [];\r\n\r\n    return this;\r\n  }\r\n  constructor(){\r\n  }\r\n\r\n}\r\n","import { Deserializable } from './deserializable.model';\r\nimport { Onet } from './onet';\r\n\r\nexport class Pps implements Deserializable {\r\n  id?: number;\r\n  code?: string;\r\n  title: string;\r\n  desc?: string;\r\n  icon?: string;\r\n  onets?: Onet[];\r\n\r\n\r\n  deserialize?(input: any): this {\r\n    Object.assign(this, input);\r\n    this.onets ?   input.onets.map(onet => new Onet().deserialize(onet)) : [];\r\n\r\n    return this;\r\n  }\r\n  constructor(){\r\n  }\r\n\r\n}\r\n","import { Deserializable } from './deserializable.model';\nimport { Pps } from './pps';\n\nexport class PpsRank implements Deserializable {\n  id?: number;\n  survey_id?: number;\n  cno_professional_profile_id: number;\n  total?: number;\n  pps?: Pps;\n  deserialize?(input: any): this {\n    Object.assign(this, input);\n    this.pps ?  new Pps().deserialize(input.pps)   : [];\n\n    return this;\n  }\n  constructor(){\n  }\n\n}\n","import { ValidatorFn, Validators } from '@angular/forms';\r\nimport { Answer } from './Answer';\r\nimport { Condition } from './condition';\r\nimport { Deserializable } from './deserializable.model';\r\nimport { Option } from './option';\r\n\r\nexport class Question implements Deserializable {\r\n  id: number;\r\n  section: string;\r\n  code: string;\r\n  text: string;\r\n  desc?: string[];\r\n  type: string;\r\n  required: boolean;\r\n  label:string;\r\n  options: Option[];\r\n  newOpt?: string;\r\n  addingOption: boolean;\r\n  start?: string;\r\n  end?: string;\r\n  validators: Array<ValidatorFn>;\r\n  conditions: Array<Condition>;\r\n  show: boolean;\r\n  value: any;\r\n  answers:  Array<Answer>;\r\n  answer:  Array<any>;\r\n  checked: boolean;\r\n  deserialize?(input: any): this {\r\n    //Set Validators\r\n    input.validators = new Array<ValidatorFn>();\r\n    input.required ? input.validators.push(Validators.required):input.required;\r\n    input.isEmail ? input.validators.push(Validators.email):input.isEmail;\r\n    input.show = true;\r\n    //Set Conditions\r\n    this.conditions ? input.options.map(condition => new Condition().deserialize(condition)) : [];\r\n    this.answers ? input.answers.map(answer => new Answer().deserialize(answer)) : [];\r\n\r\n\r\n\r\n    /*Object.assign(this, input);\r\n    if(this.conditions){\r\n       this.conditions.forEach(condition => {\r\n      if(condition.question.id === this.id){\r\n        condition.question = this\r\n        this.show = condition.question.show;\r\n      }\r\n    });\r\n    }*/\r\n    this.options ? input.options.map(option => new Option().deserialize(option)) : [];\r\n    this.checked = input.checked==\"1\" ? true: false;\r\n\r\n    return this;\r\n  }\r\n\r\n  constructor(){\r\n  }\r\n\r\n}\r\n\r\n","import { Condition } from \"./condition\";\r\nimport { Question } from \"./question\";\r\nimport { Survey } from \"./survey\";\r\n\r\nexport class Section {\r\n  id: number;\r\n  code: string;\r\n  text: string;\r\n  desc?: string[];\r\n  type: string;\r\n  required: boolean;\r\n  visible: boolean;\r\n  questions: Question[];\r\nsurvey?: Survey;\r\n  deserialize?(input: any): this {\r\n    Object.assign(this, input);\r\n    let conditions: Array<Condition> = new Array<Condition>();\r\n    this.questions ? input.questions.map(question =>{new Question().deserialize(question)} ) : [];\r\n    //Get array of conditions\r\n    this.questions.map((question) => {\r\n      question.conditions.map((condition)=>{\r\n        conditions.push(condition);\r\n      })\r\n    });\r\n    //Get index of question in array\r\n    conditions.map(condition=>{\r\n      this.questions.map((question,index)=>{\r\n        if(condition.restriction_id == question.id){\r\n          condition.question_index = index;\r\n        }\r\n      })\r\n    })\r\n\r\n\r\n    return this;\r\n  }\r\n  constructor(){\r\n  }\r\n}\r\n","import { Deserializable } from './deserializable.model';\r\nimport { Surveyed } from './surveyed';\r\n\r\nexport class Survey implements Deserializable {\r\n  id?: number;\r\n  questions?: string[];\r\n  uuid: any;\r\n  surveyed?: Surveyed;\r\n  created_at?:any;\r\n  updated_at?:any;\r\n  deserialize?(input: any): this {\r\n    Object.assign(this, input);\r\n    this.surveyed ?  new Surveyed().deserialize(input.surveyed)   : [];\r\n\r\n    return this;\r\n  }\r\n  constructor(){\r\n  }\r\n\r\n}\r\n","import { Deserializable } from './deserializable.model';\r\n\r\nexport class Surveyed implements Deserializable {\r\n  id?: number;\r\n  first_name?: string;\r\n  last_name?: string;\r\n  identification?: string;\r\n  name?: string;\r\n  population_id?: string;\r\n  deserialize?(input: any): this {\r\n    input.name = input.first_name + \" \" + input.last_name;\r\n    Object.assign(this, input);\r\n    return this;\r\n  }\r\n  constructor(){\r\n  }\r\n\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { FormGroup, Validators } from '@angular/forms';\r\nimport { Commons } from '@core/utils/commons';\r\nimport { NbToastrService } from '@nebular/theme';\r\nimport { Observable } from 'rxjs';\r\nimport { catchError, map, tap } from 'rxjs/operators';\r\nimport { ApiService } from '../api.service';\r\nimport { Occupation } from '../schemas/occupation';\r\nimport { Option } from '../schemas/option';\r\nimport { Population } from '../schemas/population';\r\nimport { PpsRank } from '../schemas/pps_rank';\r\nimport { Question } from '../schemas/question';\r\nimport { Section } from '../schemas/section';\r\nimport { Survey } from '../schemas/survey';\r\nimport { Surveyed } from '../schemas/surveyed';\r\nimport { User } from '../schemas/users';\r\nconst routes = {\r\n  questions: 'questions',\r\n  question: (id: number) => `questions/${id}`,\r\n  options: 'options',\r\n  option: (id: number) => `options/${id}`,\r\n  sections: 'sections',\r\n  section: (session: string,uuid: string ) => `sections/${session}/${uuid}`,\r\n  surveys: 'surveys',\r\n  survey: (id: string) =>  `surveys/${id}`,\r\n  survey_uuid: (id: string) => `surveys/uuid/${id}`,\r\n  surveyeds: \"surveyeds\",\r\n  surveyed: (id: string) =>  `surveyeds/${id}`,\r\n\r\n  populations:\"populations\",\r\n  population: (id: string) => `populations/${id}`,\r\n  population_activate: (id: string) => `populations/activate/${id}`,\r\n\r\n  user_surveys:  (id: string) => `surveys/${id}`,\r\n  gateway: 'surveys/gateway',\r\n  user: (id: number) => `users/${id}`,\r\n\r\n  pps_uuid: (uuid: string) =>  `pps/${uuid}`,\r\n  occupations: (pps_code: string,onet_title: string, ) =>  `occupations/${pps_code}/${onet_title}`,\r\n  occupation:(title: string) =>  `occupation/${title}`,\r\n};\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class SurveyService extends  Commons {\r\n\r\n\r\n\r\n\r\n\r\n\r\n  constructor(\r\n    private _http: ApiService,\r\n    private _nbService: NbToastrService,\r\n    ) {\r\n    super(_nbService);\r\n    }\r\n\r\n  getAllSections(): Observable<Section[]> {\r\n    return  this._http.get<Section[]>(routes.sections).pipe(\r\n      tap(_ => this.log('Fetched Sections')),\r\n      catchError(this.handleError<Section[]>('getAll', [])),\r\n      map(sections => sections.map(section => new Section().deserialize(section))),\r\n    );\r\n  }\r\n\r\n  getSingleSection(uuid: string, section: string): Observable<Section> {\r\n    return this._http.get<Section>(routes.section(section,uuid)).pipe(\r\n      map(section => new Section().deserialize(section)) );\r\n    }\r\n\r\n  getAllQuestions(): Observable<Question[]> {\r\n    return  this._http.get<Question[]>(routes.questions).pipe(\r\n     tap(_ => this.log('Fetched Questions')),\r\n     catchError(this.handleError<Question[]>('getAll', [])),\r\n     map(questions => questions.map(question => new Question().deserialize(question))),\r\n   );\r\n  }\r\n\r\n  /** PUT: Update a Questión */\r\n  updateQuestion(q: Question): Observable<Question> {\r\n    return this._http.put<Question>(routes.question(q.id), q).pipe(\r\n      tap(_ => this.log(`Updated role id=${q.id}`)),\r\n      catchError(this.handleError<Question>('updateQuestion')),\r\n    );\r\n  }\r\n\r\n  /** POST: Update a Questión */\r\n  addOption(  q: Option) {\r\n    return this._http.post<Option>(routes.options, q).pipe(\r\n      tap(_ => this.log(`Add Option id=${q.id}`)),\r\n      catchError(this.handleError<Question>('addOption')),\r\n    );\r\n  }\r\n\r\n  deleteOption(q: Option) {\r\n    return this._http.delete<Option>(routes.option(q.id)).pipe(\r\n      tap(_ => this.log(`Deleted Option id=${q.id}`)),\r\n      catchError(this.handleError<Question>('deleteOption')),\r\n    );\r\n  }\r\n  /** POST: Update or add a Survey */\r\n\r\n  addOrUpdateSurvey(survey: FormData) {\r\n    return this._http.postFormData<Survey>(routes.surveys, survey, {\r\n      reportProgress: true,\r\n      observe: 'events'\r\n    }).pipe(\r\n      tap(_ => this.log(`create Survey `)),\r\n      catchError(this.handleError<Survey>('Survey')),\r\n    );\r\n  }\r\n\r\n  createOrGetSurvey(survey: FormData) {\r\n    return this._http.postFormData<Survey>(routes.gateway, survey, {\r\n      reportProgress: true,\r\n      observe: 'events'\r\n    }).pipe(\r\n      tap(_ => this.log(`create Survey `)),\r\n      catchError(this.handleError<Survey>('Survey')),\r\n    );\r\n  }\r\n\r\n\r\n\r\n    getSingleUser(id: number): Observable<User> {\r\n    return this._http.get<User>(routes.user(id)).pipe(\r\n      catchError(this.handleError<User[]>('getSingle', [])),\r\n      map(user => new User().deserialize(user)),\r\n      );\r\n    }\r\n\r\n\r\n    getSurveys(id: string): Observable<Survey> {\r\n      return  this._http.get<Survey[]>(routes.user_surveys(id)).pipe(\r\n      tap(_ => this.log('Fetched Surveys')),\r\n      catchError(this.handleError<Question[]>('getAll', [])),\r\n      map(surveys => surveys.map(survey => new Survey().deserialize(survey))),\r\n    );\r\n    }\r\n\r\n\r\n    getSurvey(uuid: string) {\r\n      return  this._http.get<Survey[]>(routes.survey_uuid(uuid)).pipe(\r\n        tap(_ => this.log('Fetched Surveys')),\r\n        catchError(this.handleError<Survey[]>('getAll', [])),\r\n        map(survey => new Survey().deserialize(survey)) ,\r\n      );\r\n    }\r\n\r\n    getPpsRank(uuid: string) : Observable<PpsRank[]> {\r\n      return  this._http.get<PpsRank[]>(routes.pps_uuid(uuid)).pipe(\r\n        tap(_ => this.log('Fetched Pps')),\r\n        catchError(this.handleError<PpsRank[]>('getAll', [])),\r\n        map(ppsRanking => ppsRanking.map(ppsRank => new PpsRank().deserialize(ppsRank))) ,\r\n      );\r\n    }\r\n\r\n    getOccupationByTitle(title: string) {\r\n      return  this._http.get<PpsRank[]>(routes.occupation(title)).pipe(\r\n        tap(_ => this.log('Fetched getOccupations')),\r\n        catchError(this.handleError<Occupation[]>('getAll', [])),\r\n        map(occupation => new Occupation().deserialize(occupation)) ,\r\n      );    }\r\n\r\n\r\n    getOccupationsBylevel(pps_code: string,onet_title: string){\r\n      return  this._http.get<PpsRank[]>(routes.occupations(pps_code,onet_title)).pipe(\r\n        tap(_ => this.log('Fetched getOccupations')),\r\n        catchError(this.handleError<Occupation[]>('getAll', [])),\r\n        map(ocupattions => ocupattions.map(occupation => new Occupation().deserialize(occupation))) ,\r\n      );\r\n    }\r\n\r\n\r\n    getPopulations(): Observable<Population[]> {\r\n      return  this._http.get<Population[]>(routes.populations).pipe(\r\n       tap(_ => this.log('Fetched Population')),\r\n       catchError(this.handleError<Population[]>('Population', [])),\r\n       map(populations => populations.map(population => new Population().deserialize(population))),\r\n     );\r\n    }\r\n    addPopulation(formData: FormData) {\r\n      return this._http.postFormData<Survey>(routes.populations, formData, {\r\n        reportProgress: true,\r\n        observe: 'events'\r\n      }).pipe(\r\n        tap(_ => this.log(`create Population `)),\r\n        catchError(this.handleError<Population>('Population')),\r\n      );\r\n    }\r\n    getPopulation(pop_id: any) {\r\n      return  this._http.get<Population[]>(routes.population(pop_id)).pipe(\r\n        tap(_ => this.log('Fetched Population')),\r\n        catchError(this.handleError<Population[]>('getAll', [])),\r\n        map(population => new Population().deserialize(population)) ,\r\n      );\r\n    }\r\n\r\n    delPopulations(pop: Population) {\r\n      const url = routes.population(pop.id+\"\");\r\n\r\n      return this._http.delete<Population>(url).pipe(\r\n        tap(_ => this.log(`deleted Population id=${pop.id}`)),\r\n        catchError(this.handleError<Population>('deletePopulation')),\r\n      );\r\n    }\r\n\r\n    activePopulations(pop: Population): Observable<Population[]>{\r\n      const url = routes.population_activate(pop.id+\"\");\r\n\r\n      return this._http.post<Population>(url).pipe(\r\n        tap(_ => this.log('Fetched Population')),\r\n        catchError(this.handleError<Question[]>('Population', [])),\r\n        map(populations => populations.map(population => new Population().deserialize(population))),\r\n        );\r\n      }\r\n\r\n\r\n      addSurveyed(  surveyed: Surveyed) {\r\n        return this._http.post<Surveyed>(routes.surveyeds, surveyed).pipe(\r\n          tap(_ => this.log(`Add Surveyed id=${surveyed.id}`)),\r\n          catchError(this.handleError<Surveyed>('addSurveyedn')),\r\n          map(surveyed => new Surveyed().deserialize(surveyed)) ,\r\n\r\n        );\r\n      }\r\n\r\n    deleteSurveyed(surveyed: Surveyed) {\r\n    const url = routes.surveyed(surveyed.id+\"\");\r\n\r\n    return this._http.delete<Surveyed>(url).pipe(\r\n      tap(_ => this.log(`deleted Surveyed id=${surveyed.id}`)),\r\n      catchError(this.handleError<Surveyed>('deletePopulation')),\r\n    );\r\n    }\r\n\r\n    deleteSurvey(survey: Surveyed) {\r\n      const url = routes.survey(survey.id+\"\");\r\n\r\n      return this._http.delete<Survey>(url).pipe(\r\n        tap(_ => this.log(`deleted Survey id=${survey.id}`)),\r\n        catchError(this.handleError<Population>('deletePopulation')),\r\n      );\r\n    }\r\n\r\n//HELPERS\r\neval_conditions(section, form: FormGroup, value, questions) {\r\n\r\n  section.questions.map((question: Question) => {\r\n\r\n    if( question.conditions.length>0){\r\n      let result = true;\r\n      question.conditions.forEach((condition) => {\r\n        let values = condition.value.split(\",\");\r\n        if (values.includes(value + \"\")) {\r\n          //set visibility to conditioned question\r\n          form.get(condition.question.label).setValidators(null);\r\n          form.get(condition.question.label).updateValueAndValidity();\r\n\r\n          //FIX question estructure.\r\n          if(questions.questions){\r\n            questions.questions[condition.question_index].show = false;\r\n          }else{\r\n            questions[condition.question_index].show = false;\r\n\r\n          }\r\n\r\n        } else {\r\n          form.get(condition.question.label).setValidators(Validators.required);\r\n          form.get(condition.question.label).updateValueAndValidity();\r\n          form.get(condition.question.label).enable();\r\n           //FIX question estructure.\r\n            if(questions.questions){\r\n              questions.questions[condition.question_index].show = true;\r\n            }else{\r\n              questions[condition.question_index].show = true;\r\n\r\n            }\r\n        }\r\n      });\r\n    }\r\n\r\n  });\r\n\r\n}\r\n\r\n\r\n}\r\n"]}